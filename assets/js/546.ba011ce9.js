(window.webpackJsonp=window.webpackJsonp||[]).push([[546],{1013:function(t,o,a){"use strict";a.r(o);var v=a(14),_=Object(v.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"_3-5-格式化代码"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-格式化代码"}},[t._v("#")]),t._v(" 3.5 格式化代码")]),t._v(" "),o("p",[t._v("Go 开发团队不想要 Go 语言像许多其它语言那样总是在为代码风格而引发无休止的争论，浪费大量宝贵的开发时间，因此他们制作了一个工具："),o("code",[t._v("go fmt")]),t._v(" (gofmt)。这个工具可以将你的源代码格式化成符合官方统一标准的风格，属于语法风格层面上的小型重构。遵循统一的代码风格是 Go 开发中无可撼动的铁律，因此你必须在编译或提交版本管理系统之前使用 gofmt 来格式化你的代码。")]),t._v(" "),o("p",[t._v("尽管这种做法也存在一些争论，但使用 gofmt 后你不再需要自成一套代码风格而是和所有人使用相同的规则。这不仅增强了代码的可读性，而且在接手外部 Go 项目时，可以更快地了解其代码的含义。此外，大多数开发工具也都内置了这一功能。")]),t._v(" "),o("p",[t._v("Go 对于代码的缩进层级方面使用 tab 还是空格并没有强制规定，一个 tab 可以代表 4 个或 8 个空格。在实际开发中，1 个 tab 应该代表 4 个空格，而在本身的例子当中，每个 tab 代表 8 个空格。至于开发工具方面，一般都是直接使用 tab 而不替换成空格。")]),t._v(" "),o("p",[t._v("在命令行输入 "),o("code",[t._v("gofmt –w program.go")]),t._v(" 会格式化该源文件的代码然后将格式化后的代码覆盖原始内容（如果不加参数 "),o("code",[t._v("-w")]),t._v(" 则只会打印格式化后的结果而不重写文件）；"),o("code",[t._v("gofmt -w *.go")]),t._v(" 会格式化并重写所有 Go 源文件；"),o("code",[t._v("gofmt map1")]),t._v(" 会格式化并重写 "),o("code",[t._v("map1")]),t._v(" 目录及其子目录下的所有 Go 源文件。")]),t._v(" "),o("p",[o("code",[t._v("gofmt")]),t._v(" 也可以通过在参数 "),o("code",[t._v("-r")]),t._v(" 后面加入用双引号括起来的替换规则实现代码的简单重构，规则的格式："),o("code",[t._v("<原始内容> -> <替换内容>")]),t._v("。")]),t._v(" "),o("p",[t._v("实例：")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v("gofmt -r '(a) -> a' –w *.go\n")])])]),o("p",[t._v("上面的代码会将源文件中没有意义的括号去掉。")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v("gofmt -r 'a[n:len(a)] -> a[n:]' –w *.go\n")])])]),o("p",[t._v("上面的代码会将源文件中多余的 "),o("code",[t._v("len(a)")]),t._v(" 去掉。（ "),o("strong",[t._v("译者注：了解切片 (slice) 之后就明白这为什么是多余的了")]),t._v(" ）")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v("gofmt –r 'A.Func1(a,b) -> A.Func2(b,a)' –w *.go\n")])])]),o("p",[t._v("上面的代码会将源文件中符合条件的函数的参数调换位置。")]),t._v(" "),o("p",[t._v("如果想要了解有关 "),o("code",[t._v("gofmt")]),t._v(" 的更多信息，请访问该页面："),o("a",{attrs:{href:"http://golang.org/cmd/gofmt/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://golang.org/cmd/gofmt/"),o("OutboundLink")],1),t._v("。")]),t._v(" "),o("h2",{attrs:{id:"链接"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),o("ul",[o("li",[o("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),o("li",[t._v("上一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/03.4.html"}},[t._v("构建并运行 Go 程序")])],1),t._v(" "),o("li",[t._v("下一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/03.6.html"}},[t._v("生成代码文档")])],1)])])}),[],!1,null,null,null);o.default=_.exports}}]);