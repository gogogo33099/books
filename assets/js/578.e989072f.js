(window.webpackJsonp=window.webpackJsonp||[]).push([[578],{1046:function(t,o,r){"use strict";r.r(o);var a=r(14),e=Object(a.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"_7-0-数组与切片"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-0-数组与切片"}},[t._v("#")]),t._v(" 7.0 数组与切片")]),t._v(" "),o("p",[t._v("这章我们开始剖析 "),o("strong",[t._v("集合")]),t._v("，它是可以包含大量条目 (item) 的数据结构，例如数组、切片和 "),o("code",[t._v("map")]),t._v("。从这看到 Go 明显受到 Python 的影响。")]),t._v(" "),o("p",[t._v("以 "),o("code",[t._v("[]")]),t._v(" 符号标识的数组类型几乎在所有的编程语言中都是一个基本主力。Go 语言中的数组也是类似的，只是有一些特点。Go 没有 C 那么灵活，但是拥有切片 (slice) 类型。这是一种建立在 Go 语言数组类型之上的抽象，要想理解切片我们必须先理解数组。数组有特定的用处，但是却有一些呆板，所以在 Go 语言的代码里并不是特别常见。相对的，切片确实随处可见的。它们构建在数组之上并且提供更强大的能力和便捷。")]),t._v(" "),o("h2",{attrs:{id:"链接"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),o("ul",[o("li",[o("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),o("li",[t._v("上一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/06.12.html"}},[t._v("通过内存缓存来提升性能")])],1),t._v(" "),o("li",[t._v("下一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/07.1.html"}},[t._v("声明和初始化")])],1)])])}),[],!1,null,null,null);o.default=e.exports}}]);