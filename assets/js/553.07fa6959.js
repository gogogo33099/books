(window.webpackJsonp=window.webpackJsonp||[]).push([[553],{1019:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_4-3-常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-常量"}},[t._v("#")]),t._v(" 4.3 常量")]),t._v(" "),s("p",[t._v("常量使用关键字 "),s("code",[t._v("const")]),t._v(" 定义，用于存储不会改变的数据。")]),t._v(" "),s("p",[t._v("存储在常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。")]),t._v(" "),s("p",[t._v("常量的定义格式："),s("code",[t._v("const identifier [type] = value")]),t._v("，例如：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14159")]),t._v("\n")])])]),s("p",[t._v("在 Go 语言中，你可以省略类型说明符 "),s("code",[t._v("[type]")]),t._v("，因为编译器可以根据变量的值来推断其类型。")]),t._v(" "),s("ul",[s("li",[t._v("显式类型定义： "),s("code",[t._v('const b string = "abc"')])]),t._v(" "),s("li",[t._v("隐式类型定义： "),s("code",[t._v('const b = "abc"')])])]),t._v(" "),s("p",[t._v("一个没有指定类型的常量被使用时，会根据其使用环境而推断出它所需要具备的类型。换句话说，未定义类型的常量会在必要时刻根据上下文来获得相关类型。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无类型的数字型常量 “5” 它的类型在这里变成了 int")]),t._v("\n")])])]),s("p",[t._v("常量的值必须是能够在编译时就能够确定的；你可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。")]),t._v(" "),s("ul",[s("li",[t._v("正确的做法："),s("code",[t._v("const c1 = 2/3")])]),t._v(" "),s("li",[t._v("错误的做法："),s("code",[t._v("const c2 = getNumber()")]),t._v(" // 引发构建错误: "),s("code",[t._v("getNumber() used as value")])])]),t._v(" "),s("p",[s("strong",[t._v("因为在编译期间自定义函数均属于未知，因此无法用于常量的赋值，但内置函数可以使用，如："),s("code",[t._v("len()")]),t._v("。")])]),t._v(" "),s("p",[t._v("数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Ln2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.693147180559945309417232121458")]),t._v("\\\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("176568075500134360255254120680009")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Log2E "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Ln2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is a precise reciprocal")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Billion "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// float constant")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hardEight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("97")]),t._v("\n")])])]),s("p",[t._v("根据上面的例子我们可以看到，反斜杠 "),s("code",[t._v("\\")]),t._v(" 可以在常量表达式中作为多行的连接符使用。")]),t._v(" "),s("p",[t._v("与各种类型的数字型变量相比，你无需担心常量之间的类型转换问题，因为它们都是非常理想的数字。")]),t._v(" "),s("p",[t._v("不过需要注意的是，当常量赋值给一个精度过小的数字型变量时，可能会因为无法正确表达常量所代表的数值而导致溢出，这会在编译期间就引发错误。另外，常量也允许使用并行赋值的形式：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" beef"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"veg"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Monday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Tuesday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Wednesday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Thursday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Friday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Saturday "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tMonday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Tuesday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Wednesday "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\tThursday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Friday"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Saturday "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("常量还可以用作枚举：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tUnknown "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\tFemale "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\tMale "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("现在，数字 "),s("code",[t._v("0")]),t._v("、"),s("code",[t._v("1")]),t._v(" 和 "),s("code",[t._v("2")]),t._v(" 分别代表未知性别、女性和男性。这些枚举值可以用于测试某个变量或常量的实际值，比如使用 switch/case 结构（"),s("RouterLink",{attrs:{to:"/the-way-to-go/05.3.html"}},[t._v("第 5.3 节")]),t._v("）。")],1),t._v(" "),s("p",[t._v("在这个例子中，"),s("code",[t._v("iota")]),t._v(" 可以被用作枚举值：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n\tb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n\tc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("第一个 "),s("code",[t._v("iota")]),t._v(" 等于 0，每当 "),s("code",[t._v("iota")]),t._v(" 在新的一行被使用时，它的值都会自动加 1，并且没有赋值的常量默认会应用上一行的赋值表达式：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值一个常量时，之后没赋值的常量都会应用上一行的赋值表达式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = 0")]),t._v("\n\tb         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b = 1")]),t._v("\n\tc         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c = 2")]),t._v("\n\td "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d = 5   ")]),t._v("\n\te         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e = 5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值两个常量，iota 只会增长一次，而不会因为使用了两次就增长两次")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tApple"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Banana "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Apple=1 Banana=2")]),t._v("\n\tCherimoya"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Durian                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Cherimoya=2 Durian=3")]),t._v("\n\tElderberry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Fig                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Elderberry=3, Fig=4")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 iota 结合 位运算 表示资源状态的使用案例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tOpen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0001")]),t._v("\n\tClose             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0010")]),t._v("\n\tPending           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 _ 忽略不需要的 iota")]),t._v("\n\tKB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*1)")]),t._v("\n\tMB                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*2)")]),t._v("\n\tGB                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*3)")]),t._v("\n\tTB                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*4)")]),t._v("\n\tPB                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*5)")]),t._v("\n\tEB                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*6)")]),t._v("\n\tZB                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*7)")]),t._v("\n\tYB                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << (10*8)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("（ "),s("strong",[t._v("译者注：关于 "),s("code",[t._v("iota")]),t._v(" 的使用涉及到非常复杂多样的情况，这里作者解释的并不清晰，因为很难对 "),s("code",[t._v("iota")]),t._v(" 的用法进行直观的文字描述。如希望进一步了解，请观看视频教程 "),s("a",{attrs:{href:"https://github.com/Unknwon/go-fundamental-programming",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Go编程基础》"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://github.com/Unknwon/go-fundamental-programming/blob/master/lectures/lecture4.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("第四课：常量与运算符"),s("OutboundLink")],1)]),t._v(" ）")]),t._v(" "),s("p",[s("code",[t._v("iota")]),t._v(" 也可以用在表达式中，如："),s("code",[t._v("iota + 50")]),t._v("。在每遇到一个新的常量块或单个常量声明时， "),s("code",[t._v("iota")]),t._v(" 都会重置为 0（ "),s("strong",[t._v("简单地讲，每遇到一次 const 关键字，"),s("code",[t._v("iota")]),t._v(" 就重置为 0")]),t._v(" ）。")]),t._v(" "),s("p",[t._v("当然，常量之所以为常量就是恒定不变的量，因此我们无法在程序运行过程中修改它的值；如果你在代码中试图修改常量的值则会引发编译错误。")]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/04.2.html"}},[t._v("Go 程序的基本结构和要素")])],1),t._v(" "),s("li",[t._v("下一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/04.4.html"}},[t._v("变量")])],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);