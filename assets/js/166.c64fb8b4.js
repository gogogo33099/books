(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{556:function(a,s,t){"use strict";t.r(s);var n=t(14),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"bash-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bash-函数"}},[a._v("#")]),a._v(" Bash 函数")]),a._v(" "),s("p",[a._v("本章介绍 Bash 函数的用法。")]),a._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),s("p",[a._v("函数（function）是可以重复使用的代码片段，有利于代码的复用。它与别名（alias）的区别是，别名只适合封装简单的单个命令，函数则可以封装复杂的多行命令。")]),a._v(" "),s("p",[a._v("函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。")]),a._v(" "),s("p",[a._v("Bash 函数定义的语法有两种。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 第一种")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# codes")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 第二种")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# codes")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("上面代码中，"),s("code",[a._v("fn")]),a._v("是自定义的函数名，函数代码就写在大括号之中。这两种写法是等价的。")]),a._v(" "),s("p",[a._v("下面是一个简单函数的例子。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("hello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("上面代码中，函数体里面的"),s("code",[a._v("$1")]),a._v("表示函数调用时的第一个参数。")]),a._v(" "),s("p",[a._v("调用时，就直接写函数名，参数跟在函数名后面。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ hello world\nHello world\n")])])]),s("p",[a._v("下面是一个多行函数的例子，显示当前日期时间。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("today")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Today\'s date is: "')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),a._v(" +"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%A, %B %-d, %Y"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("删除一个函数，可以使用"),s("code",[a._v("unset")]),a._v("命令。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" functionName\n")])])]),s("p",[a._v("查看当前 Shell 已经定义的所有函数，可以使用"),s("code",[a._v("declare")]),a._v("命令。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("declare")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v("\n")])])]),s("p",[a._v("上面的"),s("code",[a._v("declare")]),a._v("命令不仅会输出函数名，还会输出所有定义。输出顺序是按照函数名的字母表顺序。由于会输出很多内容，最好通过管道命令配合"),s("code",[a._v("more")]),a._v("或"),s("code",[a._v("less")]),a._v("使用。")]),a._v(" "),s("p",[s("code",[a._v("declare")]),a._v("命令还支持查看单个函数的定义。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("declare")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" functionName\n")])])]),s("p",[s("code",[a._v("declare -F")]),a._v("可以输出所有已经定义的函数名，不含函数体。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("declare")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v("\n")])])]),s("h2",{attrs:{id:"参数变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数变量"}},[a._v("#")]),a._v(" 参数变量")]),a._v(" "),s("p",[a._v("函数体内可以使用参数变量，获取函数参数。函数的参数变量，与脚本参数变量是一致的。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("$1")]),a._v("~"),s("code",[a._v("$9")]),a._v("：函数的第一个到第9个的参数。")]),a._v(" "),s("li",[s("code",[a._v("$0")]),a._v("：函数所在的脚本名。")]),a._v(" "),s("li",[s("code",[a._v("$#")]),a._v("：函数的参数总数。")]),a._v(" "),s("li",[s("code",[a._v("$@")]),a._v("：函数的全部参数，参数之间使用空格分隔。")]),a._v(" "),s("li",[s("code",[a._v("$*")]),a._v("：函数的全部参数，参数之间使用变量"),s("code",[a._v("$IFS")]),a._v("值的第一个字符分隔，默认为空格，但是可以自定义。")])]),a._v(" "),s("p",[a._v("如果函数的参数多于9个，那么第10个参数可以用"),s("code",[a._v("${10}")]),a._v("的形式引用，以此类推。")]),a._v(" "),s("p",[a._v("下面是一个示例脚本"),s("code",[a._v("test.sh")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# test.sh")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("alice")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"alice: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v('"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$0")]),a._v(": "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$3")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$4")]),a._v('"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$#")]),a._v(' arguments"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nalice "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" wonderland\n")])])]),s("p",[a._v("运行该脚本，结果如下。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v(" test.sh\nalice: "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" wonderland\ntest.sh: "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" wonderland\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" arguments\n")])])]),s("p",[a._v("上面例子中，由于函数"),s("code",[a._v("alice")]),a._v("只有第一个和第二个参数，所以第三个和第四个参数为空。")]),a._v(" "),s("p",[a._v("下面是一个日志函数的例子。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("log_msg")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"['),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'+ %F %T'")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" ]: "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("使用方法如下。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ log_msg "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This is sample log message"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2018")]),a._v("-08-16 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(":56:34 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(": This is sample log message\n")])])]),s("h2",{attrs:{id:"return-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return-命令"}},[a._v("#")]),a._v(" return 命令")]),a._v(" "),s("p",[s("code",[a._v("return")]),a._v("命令用于从函数返回一个值。函数执行到这条命令，就不再往下执行了，直接返回了。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("func_return_value")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("函数将返回值返回给调用者。如果命令行直接执行函数，下一个命令可以用"),s("code",[a._v("$?")]),a._v("拿到返回值。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ func_return_value\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Value returned by function is: '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v('"')]),a._v("\nValue returned by "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" is: "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n")])])]),s("p",[s("code",[a._v("return")]),a._v("后面不跟参数，只用于返回也是可以的。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  commands\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("return")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"全局变量和局部变量-local-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局变量和局部变量-local-命令"}},[a._v("#")]),a._v(" 全局变量和局部变量，local 命令")]),a._v(" "),s("p",[a._v("Bash 函数体内直接声明的变量，属于全局变量，整个脚本都可以读取。这一点需要特别小心。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 脚本 test.sh")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("fn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"fn: foo = '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfn\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"global: foo = '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v('"')]),a._v("\n")])])]),s("p",[a._v("上面脚本的运行结果如下。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v(" test.sh\nfn: foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nglobal: foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("上面例子中，变量"),s("code",[a._v("$foo")]),a._v("是在函数"),s("code",[a._v("fn")]),a._v("内部声明的，函数体外也可以读取。")]),a._v(" "),s("p",[a._v("函数体内不仅可以声明全局变量，还可以修改全局变量。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#! /bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("fn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfn\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v("\n")])])]),s("p",[a._v("上面代码执行后，输出的变量"),s("code",[a._v("$foo")]),a._v("值为2。")]),a._v(" "),s("p",[a._v("函数里面可以用"),s("code",[a._v("local")]),a._v("命令声明局部变量。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#! /bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 脚本 test.sh")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("fn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("local")]),a._v(" foo\n  "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"fn: foo = '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfn\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"global: foo = '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v('"')]),a._v("\n")])])]),s("p",[a._v("上面脚本的运行结果如下。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v(" test.sh\nfn: foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nglobal: foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n")])])]),s("p",[a._v("上面例子中，"),s("code",[a._v("local")]),a._v("命令声明的"),s("code",[a._v("$foo")]),a._v("变量，只在函数体内有效，函数体外没有定义。")]),a._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[a._v("#")]),a._v(" 参考链接")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.linuxtechi.com/define-use-functions-linux-shell-script/",target:"_blank",rel:"noopener noreferrer"}},[a._v("How to define and use functions in Linux Shell Script"),s("OutboundLink")],1),a._v(", by Pradeep Kumar")])])])}),[],!1,null,null,null);s.default=e.exports}}]);