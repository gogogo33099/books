(window.webpackJsonp=window.webpackJsonp||[]).push([[548],{1014:function(t,o,e){"use strict";e.r(o);var r=e(14),_=Object(r.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"_3-7-其它工具"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-其它工具"}},[t._v("#")]),t._v(" 3.7 其它工具")]),t._v(" "),o("p",[t._v("Go 自带的工具集主要使用脚本和 Go 语言自身编写的，目前版本的 Go 实现了以下三个工具：")]),t._v(" "),o("ul",[o("li",[o("code",[t._v("go install")]),t._v(" 是安装 Go 包的工具，类似 Ruby 中的 rubygems。主要用于安装非标准库的包文件，将源代码编译成对象文件。")]),t._v(" "),o("li",[o("code",[t._v("go fix")]),t._v(" 用于将你的 Go 代码从旧的发行版迁移到最新的发行版，它主要负责简单的、重复的、枯燥无味的修改工作，如果像 API 等复杂的函数修改，工具则会给出文件名和代码行数的提示以便让开发人员快速定位并升级代码。Go 开发团队一般也使用这个工具升级 Go 内置工具以及 谷歌内部项目的代码。"),o("code",[t._v("go fix")]),t._v(" 之所以能够正常工作是因为 Go 在标准库就提供生成抽象语法树和通过抽象语法树对代码进行还原的功能。该工具会尝试更新当前目录下的所有 Go 源文件，并在完成代码更新后在控制台输出相关的文件名称。")]),t._v(" "),o("li",[o("code",[t._v("go test")]),t._v(" 是一个轻量级的单元测试框架（"),o("RouterLink",{attrs:{to:"/the-way-to-go/13.0.html"}},[t._v("第 13 章")]),t._v("）。")],1)]),t._v(" "),o("h2",{attrs:{id:"链接"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),o("ul",[o("li",[o("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),o("li",[t._v("上一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/03.6.html"}},[t._v("生成代码文档")])],1),t._v(" "),o("li",[t._v("下一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/03.8.html"}},[t._v("Go 性能说明")])],1)])])}),[],!1,null,null,null);o.default=_.exports}}]);