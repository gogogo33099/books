(window.webpackJsonp=window.webpackJsonp||[]).push([[554],{1023:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_4-5-基本类型和运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-基本类型和运算符"}},[t._v("#")]),t._v(" 4.5 基本类型和运算符")]),t._v(" "),a("p",[t._v("我们将在这个部分讲解有关布尔型、数字型和字符型的相关知识。")]),t._v(" "),a("p",[t._v("表达式是一种特定的类型的值，它可以由其它的值以及运算符组合而成。每个类型都定义了可以和自己结合的运算符集合，如果你使用了不在这个集合中的运算符，则会在编译时获得编译错误。")]),t._v(" "),a("p",[t._v("一元运算符只可以用于一个值的操作（作为后缀），而二元运算符则可以和两个值或者操作数结合（作为中缀）。")]),t._v(" "),a("p",[t._v("只有两个类型相同的值才可以和二元运算符结合，另外要注意的是，Go 是强类型语言，因此不会进行隐式转换，任何不同类型之间的转换都必须显式说明（第 4.2 节）。Go 不存在像 C 那样的运算符重载，表达式的解析顺序是从左至右。")]),t._v(" "),a("p",[t._v("你可以在第 4.5.3 节找到有关运算符优先级的相关信息，优先级越高的运算符在条件相同的情况下将被优先执行。但是你可以通过使用括号将其中的表达式括起来，以人为地提升某个表达式的运算优先级。")]),t._v(" "),a("h2",{attrs:{id:"_4-5-1-布尔类型-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-1-布尔类型-bool"}},[t._v("#")]),t._v(" 4.5.1 布尔类型 bool")]),t._v(" "),a("p",[t._v("一个简单的例子："),a("code",[t._v("var b bool = true")]),t._v("。")]),t._v(" "),a("p",[t._v("布尔型的值只可以是常量 true 或者 false。")]),t._v(" "),a("p",[t._v("两个类型相同的值可以使用相等 "),a("code",[t._v("==")]),t._v(" 或者不等 "),a("code",[t._v("!=")]),t._v(" 运算符来进行比较并获得一个布尔型的值。")]),t._v(" "),a("p",[t._v("当相等运算符两边的值是完全相同的值的时候会返回 "),a("code",[t._v("true")]),t._v("，否则返回 "),a("code",[t._v("false")]),t._v("，并且只有在两个的值的类型相同的情况下才可以使用。")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" aVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\naVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\naVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("当不等运算符两边的值是不同的时候会返回 "),a("code",[t._v("true")]),t._v("，否则返回 "),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" aVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\naVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\naVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("p",[t._v("Go 对于值之间的比较有非常严格的限制，只有两个类型相同的值才可以进行比较，如果值的类型是接口（interface，"),a("RouterLink",{attrs:{to:"/the-way-to-go/11.0.html"}},[t._v("第 11 章")]),t._v("），它们也必须都实现了相同的接口。如果其中一个值是常量，那么另外一个值的类型必须和该常量类型相兼容的。如果以上条件都不满足，则其中一个值的类型必须在被转换为和另外一个值的类型相同之后才可以进行比较。")],1),t._v(" "),a("p",[t._v("布尔型的常量和变量也可以通过和逻辑运算符（非 "),a("code",[t._v("!")]),t._v("、与 "),a("code",[t._v("&&")]),t._v("、或 "),a("code",[t._v("||")]),t._v("）结合来产生另外一个布尔值，这样的逻辑语句就其本身而言，并不是一个完整的 Go 语句。")]),t._v(" "),a("p",[t._v("逻辑值可以被用于条件结构中的条件语句（"),a("RouterLink",{attrs:{to:"/the-way-to-go/05.0.html"}},[t._v("第 5 章")]),t._v("），以便测试某个条件是否满足。另外，与 "),a("code",[t._v("&&")]),t._v("、或 "),a("code",[t._v("||")]),t._v(" 与相等 "),a("code",[t._v("==")]),t._v(" 或不等 "),a("code",[t._v("!=")]),t._v(" 属于二元运算符，而非 "),a("code",[t._v("!")]),t._v(" 属于一元运算符。在接下来的内容中，我们会使用 T 来代表条件符合的语句，用 F 来代表条件不符合的语句。")],1),t._v(" "),a("p",[t._v("Go 语言中包含以下逻辑运算符：")]),t._v(" "),a("p",[t._v("非运算符："),a("code",[t._v("!")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("F "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("p",[t._v("非运算符用于取得和布尔值相反的结果。")]),t._v(" "),a("p",[t._v("与运算符："),a("code",[t._v("&&")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" F "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nF "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nF "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" F "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("p",[t._v("只有当两边的值都为 "),a("code",[t._v("true")]),t._v(" 的时候，和运算符的结果才是 "),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("p",[t._v("或运算符："),a("code",[t._v("||")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" F "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nF "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nF "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" F "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("p",[t._v("只有当两边的值都为 "),a("code",[t._v("false")]),t._v(" 的时候，或运算符的结果才是 "),a("code",[t._v("false")]),t._v("，其中任意一边的值为 "),a("code",[t._v("true")]),t._v(" 就能够使得该表达式的结果为 "),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("p",[t._v("在 Go 语言中，"),a("code",[t._v("&&")]),t._v(" 和 "),a("code",[t._v("||")]),t._v(" 是具有快捷性质的运算符，当运算符左边表达式的值已经能够决定整个表达式的值的时候（"),a("code",[t._v("&&")]),t._v(" 左边的值为 "),a("code",[t._v("false")]),t._v("，"),a("code",[t._v("||")]),t._v(" 左边的值为 "),a("code",[t._v("true")]),t._v("），运算符右边的表达式将不会被执行。利用这个性质，如果你有多个条件判断，应当将计算过程较为复杂的表达式放在运算符的右侧以减少不必要的运算。")]),t._v(" "),a("p",[t._v("利用括号同样可以升级某个表达式的运算优先级。")]),t._v(" "),a("p",[t._v("在格式化输出时，你可以使用 "),a("code",[t._v("%t")]),t._v(" 来表示你要输出的值为布尔型。")]),t._v(" "),a("p",[t._v("布尔值（以及任何结果为布尔值的表达式）最常用在条件结构的条件语句中，例如：if、for 和 switch 结构（第 5 章）。")]),t._v(" "),a("p",[t._v("对于布尔值的好的命名能够很好地提升代码的可读性，例如以 "),a("code",[t._v("is")]),t._v(" 或者 "),a("code",[t._v("Is")]),t._v(" 开头的 "),a("code",[t._v("isSorted")]),t._v("、"),a("code",[t._v("isFinished")]),t._v("、"),a("code",[t._v("isVisible")]),t._v("，使用这样的命名能够在阅读代码的获得阅读正常语句一样的良好体验，例如标准库中的 "),a("code",[t._v("unicode.IsDigit(ch)")]),t._v("（"),a("RouterLink",{attrs:{to:"/the-way-to-go/04.5.html"}},[t._v("第 4.5.5 节")]),t._v("）。")],1),t._v(" "),a("h2",{attrs:{id:"_4-5-2-数字类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-数字类型"}},[t._v("#")]),t._v(" 4.5.2 数字类型")]),t._v(" "),a("h3",{attrs:{id:"_4-5-2-1-整型-int-和浮点型-float"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-1-整型-int-和浮点型-float"}},[t._v("#")]),t._v(" 4.5.2.1 整型 int 和浮点型 float")]),t._v(" "),a("p",[t._v("Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码（详情参见 "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Two's_complement",target:"_blank",rel:"noopener noreferrer"}},[t._v("二的补码"),a("OutboundLink")],1),t._v(" 页面）。")]),t._v(" "),a("p",[t._v("Go 也有基于架构的类型，例如："),a("code",[t._v("int")]),t._v("、"),a("code",[t._v("uint")]),t._v(" 和 "),a("code",[t._v("uintptr")]),t._v("。")]),t._v(" "),a("p",[t._v("这些类型的长度都是根据运行程序所在的操作系统类型所决定的：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int")]),t._v(" 和 "),a("code",[t._v("uint")]),t._v(" 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。")]),t._v(" "),a("li",[a("code",[t._v("uintptr")]),t._v(" 的长度被设定为足够存放一个指针即可。")])]),t._v(" "),a("p",[t._v("Go 语言中没有 float 类型。（Go语言中只有 "),a("code",[t._v("float32")]),t._v(" 和 "),a("code",[t._v("float64")]),t._v("）没有 double 类型。")]),t._v(" "),a("p",[t._v("与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：")]),t._v(" "),a("p",[t._v("整数：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int8")]),t._v("（-128 -> 127）")]),t._v(" "),a("li",[a("code",[t._v("int16")]),t._v("（-32768 -> 32767）")]),t._v(" "),a("li",[a("code",[t._v("int32")]),t._v("（-2,147,483,648 -> 2,147,483,647）")]),t._v(" "),a("li",[a("code",[t._v("int64")]),t._v("（-9,223,372,036,854,775,808 -> 9,223,372,036,854,775,807）")])]),t._v(" "),a("p",[t._v("无符号整数：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("uint8")]),t._v("（0 -> 255）")]),t._v(" "),a("li",[a("code",[t._v("uint16")]),t._v("（0 -> 65,535）")]),t._v(" "),a("li",[a("code",[t._v("uint32")]),t._v("（0 -> 4,294,967,295）")]),t._v(" "),a("li",[a("code",[t._v("uint64")]),t._v("（0 -> 18,446,744,073,709,551,615）")])]),t._v(" "),a("p",[t._v("浮点型（IEEE-754 标准）：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("float32")]),t._v("（+- 1e-45 -> +- 3.4 * 1e38）")]),t._v(" "),a("li",[a("code",[t._v("float64")]),t._v("（+- 5 * 1e-324 -> 107 * 1e308）")])]),t._v(" "),a("p",[a("code",[t._v("int")]),t._v(" 型是计算最快的一种类型。")]),t._v(" "),a("p",[t._v("整型的零值为 "),a("code",[t._v("0")]),t._v("，浮点型的零值为 "),a("code",[t._v("0.0")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("float32")]),t._v(" 精确到小数点后 7 位，"),a("code",[t._v("float64")]),t._v(" 精确到小数点后 15 位。由于精确度的缘故，你在使用 "),a("code",[t._v("==")]),t._v(" 或者 "),a("code",[t._v("!=")]),t._v(" 来比较浮点数时应当非常小心。你最好在正式使用前测试对于精确度要求较高的运算。")]),t._v(" "),a("p",[t._v("你应该尽可能地使用 "),a("code",[t._v("float64")]),t._v("，因为 "),a("code",[t._v("math")]),t._v(" 包中所有有关数学运算的函数都会要求接收这个类型。")]),t._v(" "),a("p",[t._v("你可以通过增加前缀 0 来表示 8 进制数（如：077），增加前缀 0x 来表示 16 进制数（如："),a("code",[t._v("0xFF")]),t._v("），以及使用 "),a("code",[t._v("e")]),t._v(" 来表示 10 的连乘（如： 1e3 = 1000，或者 6.022e23 = 6.022 x 1e23）。")]),t._v(" "),a("p",[t._v("你可以使用 "),a("code",[t._v("a := uint64(0)")]),t._v(" 来同时完成类型转换和赋值操作，这样 "),a("code",[t._v("a")]),t._v(" 的类型就是 "),a("code",[t._v("uint64")]),t._v("。")]),t._v(" "),a("p",[t._v("Go 中不允许不同类型之间的混合使用，但是对于常量的类型限制非常少，因此允许常量之间的混合使用，下面这个程序很好地解释了这个现象（该程序无法通过编译）：")]),t._v(" "),a("p",[t._v("示例 4.8 "),a("a",{attrs:{href:"examples/chapter_4/type_mixing.go"}},[t._v("type_mixing.go")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("\n\ta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n\tb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译错误")]),t._v("\n\tb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为 5 是常量，所以可以通过编译")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果你尝试编译该程序，则将得到编译错误 "),a("code",[t._v("cannot use a + a (type int) as type int32 in assignment")]),t._v("。")]),t._v(" "),a("p",[t._v("同样地，"),a("code",[t._v("int16")]),t._v("  也不能够被隐式转换为 "),a("code",[t._v("int32")]),t._v("。")]),t._v(" "),a("p",[t._v("下面这个程序展示了通过显式转换来避免这个问题（"),a("RouterLink",{attrs:{to:"/the-way-to-go/04.2.html"}},[t._v("第 4.2 节")]),t._v("）。")],1),t._v(" "),a("p",[t._v("示例 4.9 "),a("a",{attrs:{href:"examples/chapter_4/casting.go"}},[t._v("casting.go")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiler error: cannot use n (type int16) as type int32 in assignment")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//m = n")]),t._v("\n\tm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"32 bit int is: %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"16 bit int is: %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("输出：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("32 bit int is: 34\n16 bit int is: 34\n")])])]),a("p",[a("strong",[t._v("格式化说明符")])]),t._v(" "),a("p",[t._v("在格式化字符串里，"),a("code",[t._v("%d")]),t._v(" 用于格式化整数（"),a("code",[t._v("%x")]),t._v(" 和 "),a("code",[t._v("%X")]),t._v(" 用于格式化 16 进制表示的数字），"),a("code",[t._v("%g")]),t._v(" 用于格式化浮点型（"),a("code",[t._v("%f")]),t._v(" 输出浮点数，"),a("code",[t._v("%e")]),t._v(" 输出科学计数表示法），"),a("code",[t._v("%0nd")]),t._v(" 用于规定输出长度为 n 的整数，其中开头的数字 0 是必须的。")]),t._v(" "),a("p",[a("code",[t._v("%n.mg")]),t._v(" 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 "),a("code",[t._v("%5.2e")]),t._v(" 来输出 3.4 的结果为 "),a("code",[t._v("3.40e+00")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("数字值转换")])]),t._v(" "),a("p",[t._v("当进行类似 "),a("code",[t._v("a32bitInt = int32(a32Float)")]),t._v(" 的转换时，小数点后的数字将被丢弃。这种情况一般发生当从取值范围较大的类型转换为取值范围较小的类型时，或者你可以写一个专门用于处理类型转换的函数来确保没有发生精度的丢失。下面这个例子展示如何安全地从 "),a("code",[t._v("int")]),t._v(" 型转换为 "),a("code",[t._v("int8")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint8FromInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MaxUint8 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// conversion is safe")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uint8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Errorf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d is out of the uint8 range"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("或者安全地从 "),a("code",[t._v("float64")]),t._v(" 转换为 "),a("code",[t._v("int")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IntFromFloat64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MinInt32 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MaxInt32 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x lies in the integer range")]),t._v("\n\t\twhole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fraction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Modf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" fraction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\twhole"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("panic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%g is out of the int32 range"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("不过如果你实际存的数字超出你要转换到的类型的取值范围的话，则会引发 "),a("code",[t._v("panic")]),t._v("（"),a("RouterLink",{attrs:{to:"/the-way-to-go/13.2.html"}},[t._v("第 13.2 节")]),t._v("）。")],1),t._v(" "),a("p",[a("strong",[t._v("问题 4.1")]),t._v(" "),a("code",[t._v("int")]),t._v(" 和 "),a("code",[t._v("int64")]),t._v(" 是相同的类型吗？")]),t._v(" "),a("h3",{attrs:{id:"_4-5-2-2-复数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-2-复数"}},[t._v("#")]),t._v(" 4.5.2.2 复数")]),t._v(" "),a("p",[t._v("Go 拥有以下复数类型：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("complex64 (32 位实数和虚数)\ncomplex128 (64 位实数和虚数)\n")])])]),a("p",[t._v("复数使用 "),a("code",[t._v("re+imI")]),t._v(" 来表示，其中 "),a("code",[t._v("re")]),t._v(" 代表实数部分，"),a("code",[t._v("im")]),t._v(" 代表虚数部分，"),a("code",[t._v("I")]),t._v(" 代表根号负 1。")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c1 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10i")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The value is: %v"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出： 5 + 10i")]),t._v("\n")])])]),a("p",[t._v("如果 "),a("code",[t._v("re")]),t._v(" 和 "),a("code",[t._v("im")]),t._v(" 的类型均为 "),a("code",[t._v("float32")]),t._v("，那么类型为 "),a("code",[t._v("complex64")]),t._v(" 的复数 "),a("code",[t._v("c")]),t._v(" 可以通过以下方式来获得：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("complex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" im"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("函数 "),a("code",[t._v("real(c)")]),t._v(" 和 "),a("code",[t._v("imag(c)")]),t._v(" 可以分别获得相应的实数和虚数部分。")]),t._v(" "),a("p",[t._v("在使用格式化说明符时，可以使用 "),a("code",[t._v("%v")]),t._v(" 来表示复数，但当你希望只表示其中的一个部分的时候需要使用 "),a("code",[t._v("%f")]),t._v("。")]),t._v(" "),a("p",[t._v("复数支持和其它数字类型一样的运算。当你使用等号 "),a("code",[t._v("==")]),t._v(" 或者不等号 "),a("code",[t._v("!=")]),t._v(" 对复数进行比较运算时，注意对精确度的把握。"),a("code",[t._v("cmath")]),t._v(" 包中包含了一些操作复数的公共方法。如果你对内存的要求不是特别高，最好使用 "),a("code",[t._v("complex128")]),t._v(" 作为计算类型，因为相关函数都使用这个类型的参数。")]),t._v(" "),a("h3",{attrs:{id:"_4-5-2-3-位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-3-位运算"}},[t._v("#")]),t._v(" 4.5.2.3 位运算")]),t._v(" "),a("p",[t._v("位运算只能用于整数类型的变量，且需当它们拥有等长位模式时。")]),t._v(" "),a("p",[a("code",[t._v("%b")]),t._v(" 是用于表示位的格式化标识符。")]),t._v(" "),a("p",[a("strong",[t._v("二元运算符")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("按位与 "),a("code",[t._v("&")]),t._v("：")]),t._v(" "),a("p",[t._v("对应位置上的值经过和运算结果，具体参见和运算符（第 4.5.1 节），并将 T (true) 替换为 "),a("code",[t._v("1")]),t._v("，将 F (false) 替换为 "),a("code",[t._v("0")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  1 & 1 -> 1\n  1 & 0 -> 0\n  0 & 1 -> 0\n  0 & 0 -> 0\n")])])])]),t._v(" "),a("li",[a("p",[t._v("按位或 "),a("code",[t._v("|")]),t._v("：")]),t._v(" "),a("p",[t._v("对应位置上的值经过或运算结果，具体参见或运算符（第 4.5.1 节），并将 T (true) 替换为 "),a("code",[t._v("1")]),t._v("，将 F (false) 替换为 "),a("code",[t._v("0")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  1 | 1 -> 1\n  1 | 0 -> 1\n  0 | 1 -> 1\n  0 | 0 -> 0\n")])])])]),t._v(" "),a("li",[a("p",[t._v("按位异或 "),a("code",[t._v("^")]),t._v("：")]),t._v(" "),a("p",[t._v("对应位置上的值根据以下规则组合：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  1 ^ 1 -> 0\n  1 ^ 0 -> 1\n  0 ^ 1 -> 1\n  0 ^ 0 -> 0\n")])])])]),t._v(" "),a("li",[a("p",[t._v("位清除 "),a("code",[t._v("&^")]),t._v("：将指定位置上的值设置为 "),a("code",[t._v("0")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%08b\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&^")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 00001011")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("p",[a("strong",[t._v("一元运算符")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("按位补足 "),a("code",[t._v("^")]),t._v("：")]),t._v(" "),a("p",[t._v("该运算符与异或运算符一同使用，即 "),a("code",[t._v("m^x")]),t._v("，对于无符号 "),a("code",[t._v("x")]),t._v(" 使用 “全部位设置为 1” 的规则，对于有符号 "),a("code",[t._v("x")]),t._v(" 时使用 "),a("code",[t._v("m=-1")]),t._v("。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  ^10 = -01 ^ 10 = -11\n")])])])]),t._v(" "),a("li",[a("p",[t._v("位左移 "),a("code",[t._v("<<")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用法："),a("code",[t._v("bitP << n")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("bitP")]),t._v(" 的位向左移动 "),a("code",[t._v("n")]),t._v(" 位，右侧空白部分使用 0 填充；如果 "),a("code",[t._v("n")]),t._v(" 等于 2，则结果是 2 的相应倍数，即 2 的 "),a("code",[t._v("n")]),t._v(" 次方。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  1 << 10 // 等于 1 KB\n  1 << 20 // 等于 1 MB\n  1 << 30 // 等于 1 GB\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("位右移 "),a("code",[t._v(">>")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("用法："),a("code",[t._v("bitP >> n")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("bitP")]),t._v(" 的位向右移动 "),a("code",[t._v("n")]),t._v(" 位，左侧空白部分使用 0 填充；如果 "),a("code",[t._v("n")]),t._v(" 等于 2，则结果是当前值除以 2 的 n 次方。")])])])]),t._v(" "),a("p",[t._v("当希望把结果赋值给第一个操作数时，可以简写为 "),a("code",[t._v("a <<= 2")]),t._v(" 或者 "),a("code",[t._v("b ^= a & 0xffffffff")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("位左移常见实现存储单位的用例")])]),t._v(" "),a("p",[t._v("使用位左移与 "),a("code",[t._v("iota")]),t._v(" 计数配合可优雅地实现存储单位的常量枚举：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ByteSize "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过赋值给空白标识符来忽略值")]),t._v("\n\tKB ByteSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tMB\n\tGB\n\tTB\n\tPB\n\tEB\n\tZB\n\tYB\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("在通讯中使用位左移表示标识的用例")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" BitFlag "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tActive BitFlag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << 0 == 1")]),t._v("\n\tSend "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << 1 == 2")]),t._v("\n\tReceive "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 << 2 == 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nflag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Active "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Send "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 3")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-5-2-4-逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-4-逻辑运算符"}},[t._v("#")]),t._v(" 4.5.2.4 逻辑运算符")]),t._v(" "),a("p",[t._v("Go 中拥有以下逻辑运算符："),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("!=")]),t._v("（第 4.5.1 节）、"),a("code",[t._v("<")]),t._v("、"),a("code",[t._v("<=")]),t._v("、"),a("code",[t._v(">")]),t._v("、"),a("code",[t._v(">=")]),t._v("。")]),t._v(" "),a("p",[t._v("它们之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值 "),a("code",[t._v("bool")]),t._v("。例如：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("b3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b3 is true")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-5-2-5-算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-5-算术运算符"}},[t._v("#")]),t._v(" 4.5.2.5 算术运算符")]),t._v(" "),a("p",[t._v("常见可用于整数和浮点数的二元运算符有 "),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("-")]),t._v("、"),a("code",[t._v("*")]),t._v(" 和 "),a("code",[t._v("/")]),t._v("。")]),t._v(" "),a("p",[t._v("（相对于一般规则而言，Go 在进行字符串拼接时允许使用对运算符 "),a("code",[t._v("+")]),t._v(" 的重载，但 Go 本身不允许开发者进行自定义的运算符重载）")]),t._v(" "),a("p",[a("code",[t._v("/")]),t._v(" 对于整数运算而言，结果依旧为整数，例如："),a("code",[t._v("9 / 4 -> 2")]),t._v("。")]),t._v(" "),a("p",[t._v("取余运算符只能作用于整数："),a("code",[t._v("9 % 4 -> 1")]),t._v("。")]),t._v(" "),a("p",[t._v("整数除以 0 可能导致程序崩溃，将会导致运行时的恐慌状态（如果除以 0 的行为在编译时就能被捕捉到，则会引发编译错误）；"),a("RouterLink",{attrs:{to:"/the-way-to-go/13.0.html"}},[t._v("第 13 章")]),t._v(" 将会详细讲解如何正确地处理此类情况。")],1),t._v(" "),a("p",[t._v("浮点数除以 "),a("code",[t._v("0.0")]),t._v(" 会返回一个无穷尽的结果，使用 "),a("code",[t._v("+Inf")]),t._v(" 表示。")]),t._v(" "),a("p",[a("strong",[t._v("练习 4.4")]),t._v(" 尝试编译 "),a("a",{attrs:{href:"exercises/chapter_4/divby0.go"}},[t._v("divby0.go")]),t._v("。")]),t._v(" "),a("p",[t._v("你可以将语句 "),a("code",[t._v("b = b + a")]),t._v(" 简写为 "),a("code",[t._v("b += a")]),t._v("，同样的写法也可用于 "),a("code",[t._v("-=")]),t._v("、"),a("code",[t._v("*=")]),t._v("、"),a("code",[t._v("/=")]),t._v("、"),a("code",[t._v("%=")]),t._v("。")]),t._v(" "),a("p",[t._v("对于整数和浮点数，你可以使用一元运算符 "),a("code",[t._v("++")]),t._v("（递增）和 "),a("code",[t._v("--")]),t._v("（递减），但只能用于后缀：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("i++ -> i += 1 -> i = i + 1\ni-- -> i -= 1 -> i = i - 1\n")])])]),a("p",[t._v("同时，带有 "),a("code",[t._v("++")]),t._v(" 和 "),a("code",[t._v("--")]),t._v(" 的只能作为语句，而非表达式，因此 "),a("code",[t._v("n = i++")]),t._v(" 这种写法是无效的，其它像 "),a("code",[t._v("f(i++)")]),t._v(" 或者 "),a("code",[t._v("a[i]=b[i++]")]),t._v(" 这些可以用于 C、C++ 和 Java 中的写法在 Go 中也是不允许的。")]),t._v(" "),a("p",[t._v("在运算时 "),a("strong",[t._v("溢出")]),t._v(" 不会产生错误，Go 会简单地将超出位数抛弃。如果你需要范围无限大的整数或者有理数（意味着只被限制于计算机内存），你可以使用标准库中的 "),a("code",[t._v("big")]),t._v(" 包，该包提供了类似 "),a("code",[t._v("big.Int")]),t._v(" 和 "),a("code",[t._v("big.Rat")]),t._v(" 这样的类型（"),a("RouterLink",{attrs:{to:"/the-way-to-go/09.4.html"}},[t._v("第 9.4 节")]),t._v("）。")],1),t._v(" "),a("h3",{attrs:{id:"_4-5-2-6-随机数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-6-随机数"}},[t._v("#")]),t._v(" 4.5.2.6 随机数")]),t._v(" "),a("p",[t._v("一些像游戏或者统计学类的应用需要用到随机数。"),a("code",[t._v("rand")]),t._v(" 包实现了伪随机数的生成。")]),t._v(" "),a("p",[t._v("示例 4.10 "),a("a",{attrs:{href:"examples/chapter_4/random.go"}},[t._v("random.go")]),t._v(" 演示了如何生成 10 个非负随机数：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math/rand"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" rand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d / "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" rand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Intn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d / "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ttimens "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Nanosecond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\trand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Seed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timens"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%2.2f / "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Float32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可能的输出：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("816681689 / 1325201247 / 623951027 / 478285186 / 1654146165 /\n1951252986 / 2029250107 / 762911244 / 1372544545 / 591415086 / / 3 / 0 / 6 / 4 / 2 /22.10\n/ 65.77 / 65.89 / 16.85 / 75.56 / 46.90 / 55.24 / 55.95 / 25.58 / 70.61 /\n")])])]),a("p",[t._v("函数 "),a("code",[t._v("rand.Float32")]),t._v(" 和 "),a("code",[t._v("rand.Float64")]),t._v(" 返回介于 $[0.0, 1.0)$ 之间的伪随机数，其中包括 "),a("code",[t._v("0.0")]),t._v(" 但不包括 "),a("code",[t._v("1.0")]),t._v("。函数 "),a("code",[t._v("rand.Intn")]),t._v(" 返回介于 $[0, n)$ 之间的伪随机数。")]),t._v(" "),a("p",[t._v("你可以使用 "),a("code",[t._v("rand.Seed(value)")]),t._v(" 函数来提供伪随机数的生成种子，一般情况下都会使用当前时间的纳秒级数字（第 4.8 节）。")]),t._v(" "),a("h2",{attrs:{id:"_4-5-3-运算符与优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-3-运算符与优先级"}},[t._v("#")]),t._v(" 4.5.3 运算符与优先级")]),t._v(" "),a("p",[t._v("有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("优先级 \t运算符\n 7 \t\t^ !\n 6 \t\t* / % << >> & &^\n 5 \t\t+ - | ^\n 4 \t\t== != < <= >= >\n 3 \t\t<-\n 2 \t\t&&\n 1 \t\t||\n")])])]),a("p",[t._v("当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。")]),t._v(" "),a("h2",{attrs:{id:"_4-5-4-类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-4-类型别名"}},[t._v("#")]),t._v(" 4.5.4 类型别名")]),t._v(" "),a("p",[t._v("当你在使用某个类型时，你可以给它起另一个名字，然后你就可以在你的代码中使用新的名字（用于简化名称或解决名称冲突）。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("type TZ int")]),t._v(" 中，"),a("code",[t._v("TZ")]),t._v(" 就是 "),a("code",[t._v("int")]),t._v(" 类型的新名称（用于表示程序中的时区），然后就可以使用 "),a("code",[t._v("TZ")]),t._v(" 来操作 "),a("code",[t._v("int")]),t._v(" 类型的数据。")]),t._v(" "),a("p",[t._v("示例 4.11 "),a("a",{attrs:{href:"examples/chapter_4/type.go"}},[t._v("type.go")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" TZ "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b TZ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\tc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c has the value: %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：c has the value: 7")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("实际上，类型别名得到的新类型并非和原类型完全相同，新类型不会拥有原类型所附带的方法（"),a("RouterLink",{attrs:{to:"/the-way-to-go/10.0.html"}},[t._v("第 10 章")]),t._v("）；"),a("code",[t._v("TZ")]),t._v(" 可以自定义一个方法用来输出更加人性化的时区信息。")],1),t._v(" "),a("p",[a("strong",[t._v("练习 4.5")]),t._v(" 定义一个 "),a("code",[t._v("string")]),t._v(" 的类型别名 "),a("code",[t._v("Rope")]),t._v("，并声明一个该类型的变量。")]),t._v(" "),a("h2",{attrs:{id:"_4-5-5-字符类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-5-字符类型"}},[t._v("#")]),t._v(" 4.5.5 字符类型")]),t._v(" "),a("p",[t._v("严格来说，这并不是 Go 语言的一个类型，字符只是整数的特殊用例。"),a("code",[t._v("byte")]),t._v(" 类型是 "),a("code",[t._v("uint8")]),t._v(" 的别名，对于只占用 1 个字节的传统 ASCII 编码的字符来说，完全没有问题。例如："),a("code",[t._v("var ch byte = 'A'")]),t._v("；字符使用单引号括起来。")]),t._v(" "),a("p",[t._v("在 ASCII 码表中，"),a("code",[t._v("'A'")]),t._v(" 的值是 "),a("code",[t._v("65")]),t._v("，而使用 16 进制表示则为 "),a("code",[t._v("41")]),t._v("，所以下面的写法是等效的：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(" 或 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\x41'")]),t._v("\n")])])]),a("p",[t._v("（"),a("code",[t._v("\\x")]),t._v(" 总是紧跟着长度为 2 的 16 进制数）")]),t._v(" "),a("p",[t._v("另外一种可能的写法是 "),a("code",[t._v("\\")]),t._v(" 后面紧跟着长度为 3 的 8 进制数，例如："),a("code",[t._v("\\377")]),t._v("。")]),t._v(" "),a("p",[t._v("不过 Go 同样支持 Unicode（UTF-8），因此字符同样称为 Unicode 代码点或者 runes，并在内存中使用 "),a("code",[t._v("int")]),t._v(" 来表示。在文档中，一般使用格式 "),a("code",[t._v("U+hhhh")]),t._v(" 来表示，其中 "),a("code",[t._v("h")]),t._v(" 表示一个 16 进制数。其实 "),a("code",[t._v("rune")]),t._v(" 也是 Go 当中的一个类型，并且是 "),a("code",[t._v("int32")]),t._v(" 的别名。")]),t._v(" "),a("p",[t._v("在书写 Unicode 字符时，需要在 16 进制数之前加上前缀 "),a("code",[t._v("\\u")]),t._v(" 或者 "),a("code",[t._v("\\U")]),t._v("。")]),t._v(" "),a("p",[t._v("因为 Unicode 至少占用 2 个字节，所以我们使用 "),a("code",[t._v("int16")]),t._v(" 或者 "),a("code",[t._v("int")]),t._v(" 类型来表示。如果需要使用到 4 字节，则会加上 "),a("code",[t._v("\\U")]),t._v(" 前缀；前缀 "),a("code",[t._v("\\u")]),t._v(" 则总是紧跟着长度为 4 的 16 进制数，前缀 "),a("code",[t._v("\\U")]),t._v(" 紧跟着长度为 8 的 16 进制数。")]),t._v(" "),a("p",[t._v("示例 4.12 "),a("a",{attrs:{href:"examples/chapter_4/char.go"}},[t._v("char.go")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\u0041'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ch2 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\u03B2'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ch3 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\U00101234'")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d - %d - %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// integer")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%c - %c - %c\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// character")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%X - %X - %X\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// UTF-8 bytes")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%U - %U - %U"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ch3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// UTF-8 code point")]),t._v("\n")])])]),a("p",[t._v("输出：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("65 - 946 - 1053236\nA - β - r\n41 - 3B2 - 101234\nU+0041 - U+03B2 - U+101234\n")])])]),a("p",[t._v("格式化说明符 "),a("code",[t._v("%c")]),t._v(" 用于表示字符；当和字符配合使用时，"),a("code",[t._v("%v")]),t._v(" 或 "),a("code",[t._v("%d")]),t._v(" 会输出用于表示该字符的整数；"),a("code",[t._v("%U")]),t._v(" 输出格式为 "),a("code",[t._v("U+hhhh")]),t._v(" 的字符串（另一个示例见"),a("RouterLink",{attrs:{to:"/the-way-to-go/05.4.html"}},[t._v("第 5.4.4 节")]),t._v("）。")],1),t._v(" "),a("p",[t._v("包 "),a("code",[t._v("unicode")]),t._v(" 包含了一些针对测试字符的非常有用的函数（其中 "),a("code",[t._v("ch")]),t._v(" 代表字符）：")]),t._v(" "),a("ul",[a("li",[t._v("判断是否为字母："),a("code",[t._v("unicode.IsLetter(ch)")])]),t._v(" "),a("li",[t._v("判断是否为数字："),a("code",[t._v("unicode.IsDigit(ch)")])]),t._v(" "),a("li",[t._v("判断是否为空白符号："),a("code",[t._v("unicode.IsSpace(ch)")])])]),t._v(" "),a("p",[t._v("这些函数返回单个布尔值。包 "),a("code",[t._v("utf8")]),t._v(" 拥有更多与 "),a("code",[t._v("rune")]),t._v(" 类型相关的函数。")]),t._v(" "),a("p",[t._v("（ "),a("strong",[t._v("译者注：关于类型的相关讲解，可参考视频教程 《Go编程基础》 第 3 课："),a("a",{attrs:{href:"https://github.com/Unknwon/go-fundamental-programming/blob/master/lectures/lecture3.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("类型与变量"),a("OutboundLink")],1)]),t._v(" ）")]),t._v(" "),a("h2",{attrs:{id:"链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),a("li",[t._v("上一节："),a("RouterLink",{attrs:{to:"/the-way-to-go/04.4.html"}},[t._v("变量")])],1),t._v(" "),a("li",[t._v("下一节："),a("RouterLink",{attrs:{to:"/the-way-to-go/04.6.html"}},[t._v("字符串")])],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);