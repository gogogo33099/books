(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{1026:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_4-9-指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-指针"}},[t._v("#")]),t._v(" 4.9 指针")]),t._v(" "),s("p",[t._v("不像 Java 和 .NET，Go 语言为程序员提供了控制数据结构的指针的能力；但是，你不能进行指针运算。通过给予程序员基本内存布局，Go 语言允许你控制特定集合的数据结构、分配的数量以及内存访问模式，这些对构建运行良好的系统是非常重要的：指针对于性能的影响是不言而喻的，而如果你想要做的是系统编程、操作系统或者网络应用，指针更是不可或缺的一部分。")]),t._v(" "),s("p",[t._v("由于各种原因，指针对于使用面向对象编程的现代程序员来说可能显得有些陌生，不过我们将会在这一小节对此进行解释，并在未来的章节中展开深入讨论。")]),t._v(" "),s("p",[t._v("程序在内存中存储它的值，每个内存块（或字）有一个地址，通常用十六进制数表示，如："),s("code",[t._v("0x6b0820")]),t._v(" 或 "),s("code",[t._v("0xf84001d7f0")]),t._v("。")]),t._v(" "),s("p",[t._v("Go 语言的取地址符是 "),s("code",[t._v("&")]),t._v("，放到一个变量前使用就会返回相应变量的内存地址。")]),t._v(" "),s("p",[t._v("下面的代码片段（示例 4.9 "),s("a",{attrs:{href:"examples/chapter_4/pointer.go"}},[t._v("pointer.go")]),t._v("）可能输出 "),s("code",[t._v("An integer: 5, its location in memory: 0x6b0820")]),t._v("（这个值随着你每次运行程序而变化）。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"An integer: %d, it\'s location in memory: %p\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这个地址可以存储在一个叫做指针的特殊数据类型中，在本例中这是一个指向 int 的指针，即 "),s("code",[t._v("i1")]),t._v("：此处使用 "),s("code",[t._v("*int")]),t._v(" 表示。如果我们想调用指针 "),s("code",[t._v("intP")]),t._v("，我们可以这样声明它：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" intP "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n")])])]),s("p",[t._v("然后使用 "),s("code",[t._v("intP = &i1")]),t._v(" 是合法的，此时 "),s("code",[t._v("intP")]),t._v(" 指向 "),s("code",[t._v("i1")]),t._v("。")]),t._v(" "),s("p",[t._v("（指针的格式化标识符为 "),s("code",[t._v("%p")]),t._v("）")]),t._v(" "),s("p",[s("code",[t._v("intP")]),t._v(" 存储了 "),s("code",[t._v("i1")]),t._v(" 的内存地址；它指向了 "),s("code",[t._v("i1")]),t._v(" 的位置，它引用了变量 "),s("code",[t._v("i1")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("一个指针变量可以指向任何一个值的内存地址")]),t._v(" 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。当然，可以声明指针指向任何类型的值来表明它的原始性或结构性；你可以在指针类型前面加上 "),s("code",[t._v("*")]),t._v(" 号（前缀）来获取指针所指向的内容，这里的 "),s("code",[t._v("*")]),t._v(" 号是一个类型更改器。使用一个指针引用一个值被称为间接引用。")]),t._v(" "),s("p",[t._v("当一个指针被定义后没有分配到任何变量时，它的值为 "),s("code",[t._v("nil")]),t._v("。")]),t._v(" "),s("p",[t._v("一个指针变量通常缩写为 "),s("code",[t._v("ptr")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("注意事项")])]),t._v(" "),s("p",[t._v("在书写表达式类似 "),s("code",[t._v("var p *type")]),t._v(" 时，切记在 * 号和指针名称间留有一个空格，因为 "),s("code",[t._v("- var p*type")]),t._v(" 是语法正确的，但是在更复杂的表达式中，它容易被误认为是一个乘法表达式！")]),t._v(" "),s("p",[t._v("符号 * 可以放在一个指针前，如 "),s("code",[t._v("*intP")]),t._v("，那么它将得到这个指针指向地址上所存储的值；这被称为反引用（或者内容或者间接引用）操作符；另一种说法是指针转移。")]),t._v(" "),s("p",[t._v("对于任何一个变量 "),s("code",[t._v("var")]),t._v("， 如下表达式都是正确的："),s("code",[t._v("var == *(&var)")]),t._v("。")]),t._v(" "),s("p",[t._v("现在，我们应当能理解 pointer.go 的全部内容及其输出：")]),t._v(" "),s("p",[t._v("示例 4.21 "),s("a",{attrs:{href:"examples/chapter_4/pointer.go"}},[t._v("pointer.go")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"An integer: %d, its location in memory: %p\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" intP "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tintP "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i1\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The value at memory location %p is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" intP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("intP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("An integer: 5, its location in memory: 0x24f0820\nThe value at memory location 0x24f0820 is 5\n")])])]),s("p",[t._v("我们可以用下图来表示内存使用的情况：")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(443)}}),t._v(" "),s("p",[t._v("程序 string_pointer.go 为我们展示了指针对 "),s("code",[t._v("string")]),t._v(" 的例子。")]),t._v(" "),s("p",[t._v("它展示了分配一个新的值给 "),s("code",[t._v("*p")]),t._v(" 并且更改这个变量自己的值（这里是一个字符串）。")]),t._v(" "),s("p",[t._v("示例 4.22 "),s("a",{attrs:{href:"examples/chapter_4/string_pointer.go"}},[t._v("string_pointer.go")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"good bye"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ciao"')]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Here is the pointer p: %p\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints address")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Here is the string *p: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints string")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Here is the string s: %s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints same string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("Here is the pointer p: 0x2540820\nHere is the string *p: ciao\nHere is the string s: ciao\n")])])]),s("p",[t._v("通过对 "),s("code",[t._v("*p")]),t._v(" 赋另一个值来更改“对象”，这样 "),s("code",[t._v("s")]),t._v(" 也会随之更改。")]),t._v(" "),s("p",[t._v("内存示意图如下：")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:a(444)}}),t._v(" "),s("p",[s("strong",[t._v("注意事项")])]),t._v(" "),s("p",[t._v("你不能获取字面量或常量的地址，例如：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\nptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error: cannot take the address of i")]),t._v("\nptr2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error: cannot take the address of 10")]),t._v("\n")])])]),s("p",[t._v("所以说，Go 语言和 C、C++ 以及 D 语言这些低级（系统）语言一样，都有指针的概念。但是对于经常导致 C 语言内存泄漏继而程序崩溃的指针运算（所谓的指针算法，如："),s("code",[t._v("pointer+2")]),t._v("，移动指针指向字符串的字节数或数组的某个位置）是不被允许的。Go 语言中的指针保证了内存安全，更像是 Java、C# 和 VB.NET 中的引用。")]),t._v(" "),s("p",[t._v("因此 "),s("code",[t._v("p++")]),t._v(" 在 Go 语言的代码中是不合法的。")]),t._v(" "),s("p",[t._v("指针的一个高级应用是你可以传递一个变量的引用（如函数的参数），这样不会传递变量的拷贝。指针传递是很廉价的，只占用 4 个或 8 个字节。当程序在工作中需要占用大量的内存，或很多变量，或者两者都有，使用指针会减少内存占用和提高效率。被指向的变量也保存在内存中，直到没有任何指针指向它们，所以从它们被创建开始就具有相互独立的生命周期。")]),t._v(" "),s("p",[t._v("另一方面（虽然不太可能），由于一个指针导致的间接引用（一个进程执行了另一个地址），指针的过度频繁使用也会导致性能下降。")]),t._v(" "),s("p",[t._v("指针也可以指向另一个指针，并且可以进行任意深度的嵌套，导致你可以有多级的间接引用，但在大多数情况这会使你的代码结构不清晰。")]),t._v(" "),s("p",[t._v("如我们所见，在大多数情况下 Go 语言可以使程序员轻松创建指针，并且隐藏间接引用，如：自动反向引用。")]),t._v(" "),s("p",[t._v("对一个空指针的反向引用是不合法的，并且会使程序崩溃：")]),t._v(" "),s("p",[t._v("示例 4.23 "),s("a",{attrs:{href:"examples/chapter_4/testcrash.go"}},[t._v("testcrash.go")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// in Windows: stops only with: <exit code="-1073741819" msg="process crashed"/>')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runtime error: invalid memory address or nil pointer dereference")]),t._v("\n")])])]),s("p",[s("strong",[t._v("问题 4.2")]),t._v(" 列举 Go 语言中 "),s("code",[t._v("*")]),t._v(" 号的所有用法。")]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/04.8.html"}},[t._v("时间和日期")])],1),t._v(" "),s("li",[t._v("下一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/05.0.html"}},[t._v("控制结构")])],1)])])}),[],!1,null,null,null);s.default=e.exports},443:function(t,s,a){t.exports=a.p+"assets/img/4.9_fig4.4.d06cf6cb.png"},444:function(t,s,a){t.exports=a.p+"assets/img/4.9_fig4.5.d8f9071d.png"}}]);