(window.webpackJsonp=window.webpackJsonp||[]).push([[714],{1195:function(t,a,e){"use strict";e.r(a);var s=e(14),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_20-4-建造你自己的-hello-world-应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-4-建造你自己的-hello-world-应用"}},[t._v("#")]),t._v(" 20.4 建造你自己的 Hello world 应用")]),t._v(" "),a("p",[t._v("现在让我们建造一个像 "),a("RouterLink",{attrs:{to:"/the-way-to-go/20.3.html"}},[t._v("20.3 节")]),t._v("中的 demo 一样的应用，但这次我们会探索得更深一些。")],1),t._v(" "),a("h2",{attrs:{id:"_20-4-1-映像结构-map-structure-创造一个简单的-http-handler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-4-1-映像结构-map-structure-创造一个简单的-http-handler"}},[t._v("#")]),t._v(" 20.4.1 映像结构 (map-structure)：创造一个简单的 http-handler")]),t._v(" "),a("p",[t._v("创建一个目录，并给它起一个你的应用程序特有的名字，如：helloapp。这个应用程序的所有文件都在这个目录中。在这个目录中再创建一个名为 hello 的目录。这将包含我们的 hello 包的 Go 源代码文件。然后在 hello 目录下，创建一个名为 helloworld2.go 的文件，并赋予其以下内容（事实上与上文中的 demo 应用几乎相同）：")]),t._v(" "),a("p",[a("u",[a("a",{attrs:{href:"examples%5Cchapter_20%5Chelloapp%5Chello%5Chelloworld2_version1.go"}},[t._v("Listing 20.2 helloworld2_version1.go")])]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" hello\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net/http"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\thttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandleFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意包的名称：在编写独立的 Go 程序时，我们会把这段代码放在 "),a("code",[t._v("package main")]),t._v(" 中，但 Go GAE Runtime 提供了 "),a("code",[t._v("main")]),t._v(" 包和 HTTP Listener，所以你应该把你的代码放在你选择的包中，此时指的是 hello 包。其次，由于 Go App Engine 应用程序通过 Web 服务器与外部世界进行通信，所以编写这些应用程序非常像编写独立的 Go Web 应用程序（见"),a("RouterLink",{attrs:{to:"/the-way-to-go/15.0.html"}},[t._v("第 15 章")]),t._v("）。所以我们导入 "),a("code",[t._v("http")]),t._v(" 包，并为我们的应用程序中使用的不同url 模式定义处理函数。我们没有 "),a("code",[t._v("main()")]),t._v(" 函数，所以处理程序的设置必须移到 "),a("code",[t._v("init()")]),t._v(' 函数中去。另外，网络服务器本身的启动是由 GAE 为我们完成的。我们的 Go 包 hello 对任何请求的响应是发送一个包含 "Hello, world!"的消息。')],1),t._v(" "),a("h2",{attrs:{id:"_20-4-2-创建配置文件-app-yaml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-4-2-创建配置文件-app-yaml"}},[t._v("#")]),t._v(" 20.4.2 创建配置文件 app.yaml")]),t._v(" "),a("p",[t._v("所有的 GAE 应用程序都需要一个 yaml 配置文件 app.yaml，它包含了 GAE 的应用程序元数据（yaml 是一种文本文件格式，经常用于开源项目，更多信息见 www.yaml.org）。另外，这个文件告诉 App Engine 服务要使用哪个运行时，哪些 URL 应该由我们的 Go 程序处理。你可以从演示程序中复制一个 app.yaml 文件，把它放在映像 helloapp 里面，并删除 favicon.ico 的 handler。")]),t._v(" "),a("p",[t._v("应用程序的映像/文件结构应该如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("helloapp\\ \t// map of the GAE application\napp.yaml \t// configuration file\nhello\\ \t\t// map containing the source files\nhelloworld2.go\n")])])]),a("p",[t._v("只有app.yaml是必须的名字，映像、Go文件和包的名字可以有不同的选择，但按照惯例，它们的名字是一样的或类似的，根映像的后缀是 app。\napp.yaml 由 AppEngine 读取和解释，AppEngine 以下时间段内托管和执行你的程序：")]),t._v(" "),a("ul",[a("li",[t._v("当您将您的应用程序上传到 AppEngine 以使其被托管。")]),t._v(" "),a("li",[t._v("当它被执行时。")]),t._v(" "),a("li",[t._v("当用户访问它时。")])]),t._v(" "),a("p",[t._v("它可以包含注释，前面有一个 "),a("code",[t._v("#")]),t._v("，并包含以下语句：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" helloworld\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runtime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" go\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("api_version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# routing-table: routing of different urls to different types of handlers")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("handlers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /.*\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" _go_app\n")])])]),a("p",[t._v("app.yaml 中的 "),a("code",[t._v("application: value helloworld")]),t._v(" 是您的应用程序标识符。这个值在开发过程中可以是任何东西；以后在向 App Engine 注册您的应用程序时，您将选择一个唯一的标识符（在所有 GAE 应用程序中唯一）并更新这个值。")]),t._v(" "),a("p",[a("code",[t._v("version")]),t._v(" 表示您的应用程序正在运行的版本：事实上，GAE 可以并行地运行您的应用程序的几个版本，但其中一个必须被指定为默认版本。它可以包含字母数字字符，以及连字符。因此，你可以运行一个测试版本，如T2-31 和一个生产版本 P2-1。")]),t._v(" "),a("p",[a("code",[t._v("runtime")]),t._v(" 是编写应用程序的语言（其他允许的值是 Java 和 Python）。如果你在上传应用软件的新版本之前调整它，App Engine 将保留以前的版本，并让你使用管理控制台回退到以前的版本。")]),t._v(" "),a("p",[a("code",[t._v("api_version")]),t._v(" 是本 SDK 中使用的 Go API 的版本；它们可能与以前的版本不兼容。你可以在以前的 api_version SDK 中构建你的应用程序的早期版本；如果 GAE 仍然允许，它们可以继续运行，但通常有一个时间限制，而你应该将你的应用程序更新到新的api版本：bin map中的gofix工具可能能够完成大部分所需的更新。")]),t._v(" "),a("p",[a("code",[t._v("handler")]),t._v(" 部分是循环表 (routing table)：它告诉 GAE 如何将发送到服务器上的请求映射到代码中。对于每一个传入的请求 url 模式（本地开发时在 http://localhost:8080/ 之后的部分，在云端运行时在 http://appname.appspot.com/ 之后的部分）与 url 后面的正则表达式相匹配。")]),t._v(" "),a("p",[t._v("对于第一个匹配的 url 模式，相应的脚本会被执行。在我们的例子中，每一个路径与正则表达式 "),a("code",[t._v("/.*")]),t._v(" 相匹配的 URL 请求（即：所有 URL）都应该由 Go 程序处理。"),a("code",[t._v("_go_app")]),t._v(" 值是 dev_appserver.py 识别的一个神奇字符串；生产的 App Engine 服务器会忽略它。")]),t._v(" "),a("p",[t._v("如果你看一下演示的 helloworld 应用程序的 app.yaml 文件，你会发现它在处理程序中包含一个初始部分：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("handlers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /favicon\\.ico\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("static_files")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" favicon.ico\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("upload")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" favicon\\.ico\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /.*\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" _go_app\n")])])]),a("p",[t._v("一些文件 ("),a("code",[t._v("static_files")]),t._v(") ，如图片，不会改变（在这个例子中是图片favicon.ico）。这些文件可以放在不同的 AppEngine 服务器上的一种共同缓存中，使它们能够更快地提供给用户。如果您的应用程序有许多这样的文件，把它们放在一个单独的目录中，按惯例命名为 static。")]),t._v(" "),a("p",[a("code",[t._v("upload")]),t._v(" 表示当您部署应用程序时，什么必须上传到云端；例如，如果它包含 images/(*.ico|*.gif|*.jpg)，它将把本地 images 目录内所有这些类型的文件上传到 AppEngine 服务器。")]),t._v(" "),a("p",[t._v("正如我们将看到的，大多数 GAE 应用程序也使用模板文件，这些文件可以存储在根应用程序地图中，或在一个特殊的目录 tmpl 中。")]),t._v(" "),a("p",[t._v("因此，一个 GAE 应用程序的一般结构可能是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yourapp\\ \t\t// map of the GAE application\n\t\tapp.yaml // configuration file\n\t\tyourpackage\\ // map containing the source files\n\t\t\tpackage1.go\n\t\t\t…\n\t\ttmpl\\ // map containing template files\n\t\t\troot.html\n\t\t\tupdate.html\n\t\t\t…\n\t\tstatic\\ // map containing static files\n\t\t\tyourapp.ico\n\t\t\t…\n")])])]),a("p",[t._v("与 demo 一样，在控制台窗口中进入包含 helloapp 的映像，并发出如下命令："),a("code",[t._v("dev_appserver.py helloapp")])]),t._v(" "),a("p",[t._v("或者你可以通过任何一个映像的 console 窗口并且唤醒：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("dev_appserver.py /path_to_map_helloapp/helloapp\n")])])]),a("p",[t._v("在这两种情况下，网络服务器现在都在运行，并监听 8080 端口的请求。通过在你的网络浏览器中访问以下 URL 来测试该应用程序：http://localhost:8080/")]),t._v(" "),a("p",[t._v("你应该看到： Hello, world!")]),t._v(" "),a("p",[t._v("在服务器控制台，出现以下文字：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ dev_appserver.py helloapp\nINFO 2011-10-31 08:54:29,021 appengine_rpc.py:159] Server: appengine.google.com\nINFO 2011-10-31 08:54:29,025 appcfg.py:463] Checking for updates to the SDK.\nINFO 2011-10-31 08:54:29,316 appcfg.py:481] The SDK is up to date.\nWARNING 2011-10-31 08:54:29,316 datastore_file_stub.py:512] Could not read datastore\ndata from /tmp/dev_appserver.datastore\nINFO 2011-10-31 08:54:29,317 rdbms_sqlite.py:58] Connecting to SQLite database ‘’\nwith file ‘/tmp/dev_appserver.rdbms’\nINFO 2011-10-31 08:54:29,638 dev_appserver_multiprocess.py:637] Running application\nhelloworld on port 8080: http://localhost:8080\n\t\t<-(A)\nINFO 2011-10-31 08:56:13,148 __init__.py:365] building _go_app\n\t\t<-(B)\nINFO 2011-10-31 08:56:15,073 __init__.py:351] running _go_app\nINFO 2011-10-31 08:56:15,188 dev_appserver.py:4143] “GET / HTTP/1.1” 200 -\n\t\t<-(C)\n")])])]),a("p",[t._v("在 (A) 处服务器准备好了，在 (B) 处服务器编译并运行 Go 程序，在 (C) 处我们的应用程序的请求进来了，此时 HTML 输出页面被提供到服务器上。")]),t._v(" "),a("p",[t._v("当服务器被终止或尚未启动，而客户端请求网址 http://localhost:8080/，浏览器在FireFox 中会打印出这样的信息：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Unable to connect Firefox can’t establish a connection to the server at localhost:8080.\n")])])]),a("h2",{attrs:{id:"_20-4-3-迭代开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-4-3-迭代开发"}},[t._v("#")]),t._v(" 20.4.3 迭代开发")]),t._v(" "),a("p",[t._v("开发应用的服务器会观察你的文件中的变化，当你更新你的源代码时（编辑+保存），它重新编译它们并重新启动你的本地应用；不需要重新启动 dev_appserver.py")]),t._v(" "),a("p",[t._v('现在试试：让 Web 服务器运行，然后编辑 helloworld2.go，将 "Hello, world!" 改为其他内容。重新加载 http://localhost:8080/，就可以看到变化了：这和编写 Rails 或 Django 应用程序一样，都是动态运行的。')]),t._v(" "),a("p",[t._v('要关闭 Web 服务器，确保终端窗口处于活动状态，然后按 Ctrl+C（或适当的用于控制台的 "break "键）：')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INFO 2011-10-31 08:56:21,420 dev_appserver.py:4143] “GET / HTTP/1.1” 200 -\nINFO 2011-10-31 08:57:59,836 __init__.py:365] building _go_app <-(D)\nINFO 2011-10-31 08:58:00,365 __init__.py:351] running _go_app\nINFO 2011-10-31 08:58:00,480 dev_appserver.py:4143] “GET / HTTP/1.1” 200 -\n^CINFO 2011-10-31 08:58:32,769 dev_appserver_main.py:665] Server interrupted by user,\nterminating <-(E)\n")])])]),a("p",[t._v("这可以从上面第一个列表之后的服务器控制台输出中看到：在 (D) 处，apperver 看到 Go 的源代码被改变了，并重新编译；在 (E) 处，服务器被终止了。")]),t._v(" "),a("h2",{attrs:{id:"_20-4-4-与-goclipse-ide-的集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-4-4-与-goclipse-ide-的集成"}},[t._v("#")]),t._v(" 20.4.4. 与 GoClipse IDE 的集成")]),t._v(" "),a("p",[t._v("a) 窗口/首选项/Go：")]),t._v(" "),a("p",[t._v("将所有内容指向 GAE 的 Go 根目录")]),t._v(" "),a("p",[t._v("b) 运行/外部工具/外部工具配置/选择程序：")]),t._v(" "),a("p",[t._v("​\t 制作新的配置：点击 New 按钮。\n​\t\t名称：GAE\n​\t\t位置：/home/user/google_appengine/dev_appserver.py\n​\t\t工作目录：/home/user/workspace/bedilly/src/pkg/helloapp\n​\t\t参数： home/user/workspace/bedilly/src/pkg/helloapp\n​\t应用/运行")]),t._v(" "),a("p",[t._v("通过配置一个外部工具，部署你的应用程序也很容易：http://code.google.com/p/goclipse/wiki/DeployingToGoogleAppEngineFromEclipse")]),t._v(" "),a("h2",{attrs:{id:"链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),a("li",[t._v("上一节："),a("RouterLink",{attrs:{to:"/the-way-to-go/20.3.html"}},[t._v("安装 Go App Engine SDK")])],1),t._v(" "),a("li",[t._v("下一节："),a("RouterLink",{attrs:{to:"/the-way-to-go/20.5.html"}},[t._v("使用用户服务和探索其 API")])],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);