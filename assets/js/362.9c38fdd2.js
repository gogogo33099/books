(window.webpackJsonp=window.webpackJsonp||[]).push([[362],{804:function(t,s,n){"use strict";n.r(s);var i=n(14),e=Object(i.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"第9章-基于共享变量的并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第9章-基于共享变量的并发"}},[this._v("#")]),this._v(" 第9章　基于共享变量的并发")]),this._v(" "),t("p",[this._v("前一章我们介绍了一些使用goroutine和channel这样直接而自然的方式来实现并发的方法。然而这样做我们实际上回避了在写并发代码时必须处理的一些重要而且细微的问题。")]),this._v(" "),t("p",[this._v("在本章中，我们会细致地了解并发机制。尤其是在多goroutine之间的共享变量，并发问题的分析手段，以及解决这些问题的基本模式。最后我们会解释goroutine和操作系统线程之间的技术上的一些区别。")])])}),[],!1,null,null,null);s.default=e.exports}}]);