(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{654:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_4-8-grpcurl-工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-grpcurl-工具"}},[s._v("#")]),s._v(" 4.8 grpcurl 工具")]),s._v(" "),t("p",[s._v("Protobuf 本身具有反射功能，可以在运行时获取对象的 Proto 文件。gRPC 同样也提供了一个名为 reflection 的反射包，用于为 gRPC 服务提供查询。gRPC 官方提供了一个 C++ 实现的 grpc_cli 工具，可以用于查询 gRPC 列表或调用 gRPC 方法。但是 C++ 版本的 grpc_cli 安装比较复杂，我们推荐用纯 Go 语言实现的 grpcurl 工具。本节将简要介绍 grpcurl 工具的用法。")]),s._v(" "),t("h2",{attrs:{id:"_4-8-1-启动反射服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-1-启动反射服务"}},[s._v("#")]),s._v(" 4.8.1 启动反射服务")]),s._v(" "),t("p",[s._v("reflection 包中只有一个 Register 函数，用于将 grpc.Server 注册到反射服务中。reflection 包文档给出了简单的使用方法：")]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"google.golang.org/grpc/reflection"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\ts "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" grpc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tpb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("RegisterYourOwnServer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Register reflection service on gRPC server.")]),s._v("\n\treflection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Register")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\ts"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Serve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("如果启动了 gprc 反射服务，那么就可以通过 reflection 包提供的反射服务查询 gRPC 服务或调用 gRPC 方法。")]),s._v(" "),t("h2",{attrs:{id:"_4-8-2-查看服务列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-2-查看服务列表"}},[s._v("#")]),s._v(" 4.8.2 查看服务列表")]),s._v(" "),t("p",[s._v("grpcurl 是 Go 语言开源社区开发的工具，需要手工安装：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ go get github.com/fullstorydev/grpcurl\n$ go install github.com/fullstorydev/grpcurl/cmd/grpcurl\n")])])]),t("p",[s._v("grpcurl 中最常使用的是 list 命令，用于获取服务或服务方法的列表。比如 "),t("code",[s._v("grpcurl localhost:1234 list")]),s._v(" 命令将获取本地 1234 端口上的 grpc 服务的列表。在使用 grpcurl 时，需要通过 "),t("code",[s._v("-cert")]),s._v(" 和 "),t("code",[s._v("-key")]),s._v(" 参数设置公钥和私钥文件，连接启用了 tls 协议的服务。对于没有没用 tls 协议的 grpc 服务，通过 "),t("code",[s._v("-plaintext")]),s._v(" 参数忽略 tls 证书的验证过程。如果是 Unix Socket 协议，则需要指定 "),t("code",[s._v("-unix")]),s._v(" 参数。")]),s._v(" "),t("p",[s._v("如果没有配置好公钥和私钥文件，也没有忽略证书的验证过程，那么将会遇到类似以下的错误：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ grpcurl localhost:1234 list\nFailed to dial target "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"localhost:1234"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" tls: first record does not "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("look")]),s._v(" like a TLS handshake\n")])])]),t("p",[s._v("如果 grpc 服务正常，但是服务没有启动 reflection 反射服务，将会遇到以下错误：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ grpcurl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-plaintext")]),s._v(" localhost:1234 list\nFailed to list services: server does not support the reflection API\n")])])]),t("p",[s._v("假设 grpc 服务已经启动了 reflection 反射服务，服务的 Protobuf 文件如下：")]),s._v(" "),t("div",{staticClass:"language-protobuf extra-class"},[t("pre",{pre:!0,attrs:{class:"language-protobuf"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("syntax")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"proto3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" HelloService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("message")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("service")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rpc")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Hello")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("returns")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rpc")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Channel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("stream")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("returns")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("stream")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("grpcurl 用 list 命令查看服务列表时将看到以下输出：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ grpcurl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-plaintext")]),s._v(" localhost:1234 list\nHelloService.HelloService\ngrpc.reflection.v1alpha.ServerReflection\n")])])]),t("p",[s._v("其中 HelloService.HelloService 是在 protobuf 文件定义的服务。而 ServerReflection 服务则是 reflection 包注册的反射服务。通过 ServerReflection 服务可以查询包括本身在内的全部 gRPC 服务信息。")]),s._v(" "),t("h2",{attrs:{id:"_4-8-3-服务的方法列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-3-服务的方法列表"}},[s._v("#")]),s._v(" 4.8.3 服务的方法列表")]),s._v(" "),t("p",[s._v("继续使用 list 子命令还可以查看 HelloService 服务的方法列表：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ grpcurl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-plaintext")]),s._v(" localhost:1234 list HelloService.HelloService\nChannel\nHello\n")])])]),t("p",[s._v("从输出可以看到 HelloService 服务提供了 Channel 和 Hello 两个方法，和 Protobuf 文件的定义是一致的。")]),s._v(" "),t("p",[s._v("如果还想了解方法的细节，可以使用 grpcurl 提供的 describe 子命令查看更详细的描述信息：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('$ grpcurl -plaintext localhost:1234 describe HelloService.HelloService\nHelloService.HelloService is a service:\n{\n  "name": "HelloService",\n  "method": [\n    {\n      "name": "Hello",\n      "inputType": ".HelloService.String",\n      "outputType": ".HelloService.String",\n      "options": {\n\n      }\n    },\n    {\n      "name": "Channel",\n      "inputType": ".HelloService.String",\n      "outputType": ".HelloService.String",\n      "options": {\n\n      },\n      "clientStreaming": true,\n      "serverStreaming": true\n    }\n  ],\n  "options": {\n\n  }\n}\n')])])]),t("p",[s._v("输出列出了服务的每个方法，每个方法输入参数和返回值对应的类型。")]),s._v(" "),t("h2",{attrs:{id:"_4-8-4-获取类型信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-4-获取类型信息"}},[s._v("#")]),s._v(" 4.8.4 获取类型信息")]),s._v(" "),t("p",[s._v("在获取到方法的参数和返回值类型之后，还可以继续查看类型的信息。下面是用 describe 命令查看参数 HelloService.String 类型的信息：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ grpcurl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-plaintext")]),s._v(" localhost:1234 describe HelloService.String\nHelloService.String is a message:\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"String"')]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"field"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v(",\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"number"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(",\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"label"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"LABEL_OPTIONAL"')]),s._v(",\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"TYPE_STRING"')]),s._v(",\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"options"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(",\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jsonName"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"options"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("json 信息对应 HelloService.String 类型在 Protobuf 中的定义如下：")]),s._v(" "),t("div",{staticClass:"language-protobuf extra-class"},[t("pre",{pre:!0,attrs:{class:"language-protobuf"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("message")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("输出的 json 数据只不过是 Protobuf 文件的另一种表示形式。")]),s._v(" "),t("h2",{attrs:{id:"_4-8-5-调用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-5-调用方法"}},[s._v("#")]),s._v(" 4.8.5 调用方法")]),s._v(" "),t("p",[s._v("在获取 gRPC 服务的详细信息之后就可以 json 调用 gRPC 方法了。")]),s._v(" "),t("p",[s._v("下面命令通过 "),t("code",[s._v("-d")]),s._v(" 参数传入一个 json 字符串作为输入参数，调用的是 HelloService 服务的 Hello 方法：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ grpcurl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-plaintext")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{"value":"gopher"}\'')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n\tlocalhost:1234 HelloService.HelloService/Hello\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello:gopher"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("如果 "),t("code",[s._v("-d")]),s._v(" 参数是 "),t("code",[s._v("@")]),s._v(" 则表示从标准输入读取 json 输入参数，这一般用于比较输入复杂的 json 数据，也可以用于测试流方法。")]),s._v(" "),t("p",[s._v("下面命令是连接 Channel 流方法，通过从标准输入读取输入流参数：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ grpcurl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-plaintext")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" @ localhost:1234 HelloService.HelloService/Channel\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gopher"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello:gopher"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wasm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello:wasm"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("通过 grpcurl 工具，我们可以在没有客户端代码的环境下测试 gRPC 服务。")])])}),[],!1,null,null,null);t.default=e.exports}}]);