(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{1048:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_7-2-切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-切片"}},[t._v("#")]),t._v(" 7.2 切片")]),t._v(" "),s("h2",{attrs:{id:"_7-2-1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1-概念"}},[t._v("#")]),t._v(" 7.2.1 概念")]),t._v(" "),s("p",[t._v("切片 (slice) 是对数组一个连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个引用类型（因此更类似于 C/C++ 中的数组类型，或者 Python 中的 list 类型）。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集。需要注意的是，终止索引标识的项不包括在切片内。切片提供了一个相关数组的动态窗口。")]),t._v(" "),s("p",[t._v("切片是可索引的，并且可以由 "),s("code",[t._v("len()")]),t._v(" 函数获取长度。")]),t._v(" "),s("p",[t._v("给定项的切片索引可能比相关数组的相同元素的索引小。和数组不同的是，切片的长度可以在运行时修改，最小为 0， 最大为相关数组的长度：切片是一个 "),s("strong",[t._v("长度可变的数组")]),t._v("。")]),t._v(" "),s("p",[t._v("切片提供了计算容量的函数 "),s("code",[t._v("cap()")]),t._v(" 可以测量切片最长可以达到多少：它等于切片的长度 + 数组除切片之外的长度。如果 "),s("code",[t._v("s")]),t._v(" 是一个切片，"),s("code",[t._v("cap(s)")]),t._v(" 就是从 "),s("code",[t._v("s[0]")]),t._v(" 到数组末尾的数组长度。切片的长度永远不会超过它的容量，所以对于切片 "),s("code",[t._v("s")]),t._v(" 来说该不等式永远成立："),s("code",[t._v("0 <= len(s) <= cap(s)")]),t._v("。")]),t._v(" "),s("p",[t._v("多个切片如果表示同一个数组的片段，它们可以共享数据；因此一个切片和相关数组的其他切片是共享存储的，相反，不同的数组总是代表不同的存储。数组实际上是切片的构建块。")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v(" 因为切片是引用，所以它们不需要使用额外的内存并且比使用数组更有效率，所以在 Go 代码中切片比数组更常用。")]),t._v(" "),s("p",[t._v("声明切片的格式是： "),s("code",[t._v("var identifier []type")]),t._v("（不需要说明长度）。")]),t._v(" "),s("p",[t._v("一个切片在未初始化之前默认为 "),s("code",[t._v("nil")]),t._v("，长度为 0。")]),t._v(" "),s("p",[t._v("切片的初始化格式是："),s("code",[t._v("var slice1 []type = arr1[start:end]")]),t._v("。")]),t._v(" "),s("p",[t._v("这表示 "),s("code",[t._v("slice1")]),t._v(" 是由数组 "),s("code",[t._v("arr1")]),t._v(" 从 "),s("code",[t._v("start")]),t._v(" 索引到 "),s("code",[t._v("end-1")]),t._v(" 索引之间的元素构成的子集（切分数组，"),s("code",[t._v("start:end")]),t._v(" 被称为切片表达式）。所以 "),s("code",[t._v("slice1[0]")]),t._v(" 就等于 "),s("code",[t._v("arr1[start]")]),t._v("。这可以在 "),s("code",[t._v("arr1")]),t._v(" 被填充前就定义好。")]),t._v(" "),s("p",[t._v("如果某个人写："),s("code",[t._v("var slice1 []type = arr1[:]")]),t._v(" 那么 "),s("code",[t._v("slice1")]),t._v(" 就等于完整的 "),s("code",[t._v("arr1")]),t._v(" 数组（所以这种表示方式是 "),s("code",[t._v("arr1[0:len(arr1)]")]),t._v(" 的一种缩写）。另外一种表述方式是："),s("code",[t._v("slice1 = &arr1")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("arr1[2:]")]),t._v(" 和 "),s("code",[t._v("arr1[2:len(arr1)]")]),t._v(" 相同，都包含了数组从第三个到最后的所有元素。")]),t._v(" "),s("p",[s("code",[t._v("arr1[:3]")]),t._v(" 和 "),s("code",[t._v("arr1[0:3]")]),t._v(" 相同，包含了从第一个到第三个元素（不包括第四个）。")]),t._v(" "),s("p",[t._v("如果你想去掉 "),s("code",[t._v("slice1")]),t._v(" 的最后一个元素，只要 "),s("code",[t._v("slice1 = slice1[:len(slice1)-1]")]),t._v("。")]),t._v(" "),s("p",[t._v("一个由数字 1、2、3 组成的切片可以这么生成："),s("code",[t._v("s := [3]int{1,2,3}[:]")]),t._v("（注：应先用 "),s("code",[t._v("s := [3]int{1, 2, 3}")]),t._v(" 生成数组, 再使用 "),s("code",[t._v("s[:]")]),t._v(" 转成切片）甚至更简单的 "),s("code",[t._v("s := []int{1,2,3}")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("s2 := s[:]")]),t._v(" 是用切片组成的切片，拥有相同的元素，但是仍然指向相同的相关数组。")]),t._v(" "),s("p",[t._v("一个切片 "),s("code",[t._v("s")]),t._v(" 可以这样扩展到它的大小上限："),s("code",[t._v("s = s[:cap(s)]")]),t._v("，如果再扩大的话就会导致运行时错误（参见第 7.7 节）。")]),t._v(" "),s("p",[t._v("对于每一个切片（包括 "),s("code",[t._v("string")]),t._v("），以下状态总是成立的：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("s == s[:i] + s[i:] // i是一个整数且: 0 <= i <= len(s)\nlen(s) <= cap(s)\n")])])]),s("p",[t._v("切片也可以用类似数组的方式初始化："),s("code",[t._v("var x = []int{2, 3, 5, 7, 11}")]),t._v("。这样就创建了一个长度为 5 的数组并且创建了一个相关切片。")]),t._v(" "),s("p",[t._v("切片在内存中的组织方式实际上是一个有 3 个域的结构体：指向相关数组的指针，切片长度以及切片容量。下图给出了一个长度为 2，容量为 4 的切片 "),s("code",[t._v("y")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("y[0] = 3")]),t._v(" 且 "),s("code",[t._v("y[1] = 5")]),t._v("。")]),t._v(" "),s("li",[t._v("切片 "),s("code",[t._v("y[0:4]")]),t._v(" 由 元素 "),s("code",[t._v("3")]),t._v("，"),s("code",[t._v("5")]),t._v("，"),s("code",[t._v("7")]),t._v(" 和 "),s("code",[t._v("11")]),t._v(" 组成。")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(445)}}),t._v(" "),s("p",[t._v("示例 7.7 "),s("a",{attrs:{href:"examples/chapter_7/array_slices.go"}},[t._v("array_slices.go")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" slice1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// item at index 5 not included!")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// load the array with integers: 0,1,2,3,4,5")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tarr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print the slice")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Slice at %d is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The length of arr1 is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The length of slice1 is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The capacity of slice1 is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// grow the slice")]),t._v("\n\tslice1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Slice at %d is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The length of slice1 is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The capacity of slice1 is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// grow the slice beyond capacity")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//slice1 = slice1[0:7 ] // panic: runtime error: slice bound out of range")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("Slice at 0 is 2  \nSlice at 1 is 3  \nSlice at 2 is 4  \nThe length of arr1 is 6  \nThe length of slice1 is 3  \nThe capacity of slice1 is 4  \nSlice at 0 is 2  \nSlice at 1 is 3  \nSlice at 2 is 4  \nSlice at 3 is 5  \nThe length of slice1 is 4  \nThe capacity of slice1 is 4  \n")])])]),s("p",[t._v("如果 "),s("code",[t._v("s2")]),t._v(" 是一个切片，你可以将 "),s("code",[t._v("s2")]),t._v(" 向后移动一位 "),s("code",[t._v("s2 = s2[1:]")]),t._v("，但是末尾没有移动。切片只能向后移动，"),s("code",[t._v("s2 = s2[-1:]")]),t._v(" 会导致编译错误。切片不能被重新分片以获取数组的前一个元素。")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v(" 绝对不要用指针指向切片。切片本身已经是一个引用类型，所以它本身就是一个指针！！")]),t._v(" "),s("p",[t._v("问题 7.2： 给定切片 "),s("code",[t._v("b:= []byte{'g', 'o', 'l', 'a', 'n', 'g'}")]),t._v("，那么 "),s("code",[t._v("b[1:4]")]),t._v("、"),s("code",[t._v("b[:2]")]),t._v("、"),s("code",[t._v("b[2:]")]),t._v(" 和 "),s("code",[t._v("b[:]")]),t._v(" 分别是什么？")]),t._v(" "),s("h2",{attrs:{id:"_7-2-2-将切片传递给函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-2-将切片传递给函数"}},[t._v("#")]),t._v(" 7.2.2 将切片传递给函数")]),t._v(" "),s("p",[t._v("如果你有一个函数需要对数组做操作，你可能总是需要把参数声明为切片。当你调用该函数时，把数组分片，创建为一个切片引用并传递给该函数。这里有一个计算数组元素和的方法:")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_7-2-3-用-make-创建一个切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-3-用-make-创建一个切片"}},[t._v("#")]),t._v(" 7.2.3 用 make() 创建一个切片")]),t._v(" "),s("p",[t._v("当相关数组还没有定义时，我们可以使用 "),s("code",[t._v("make()")]),t._v(" 函数来创建一个切片，同时创建好相关数组："),s("code",[t._v("var slice1 []type = make([]type, len)")]),t._v("。")]),t._v(" "),s("p",[t._v("也可以简写为 "),s("code",[t._v("slice1 := make([]type, len)")]),t._v("，这里 "),s("code",[t._v("len")]),t._v(" 是数组的长度并且也是 "),s("code",[t._v("slice")]),t._v(" 的初始长度。")]),t._v(" "),s("p",[t._v("所以定义 "),s("code",[t._v("s2 := make([]int, 10)")]),t._v("，那么 "),s("code",[t._v("cap(s2) == len(s2) == 10")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("make()")]),t._v(" 接受 2 个参数：元素的类型以及切片的元素个数。")]),t._v(" "),s("p",[t._v("如果你想创建一个 "),s("code",[t._v("slice1")]),t._v("，它不占用整个数组，而只是占用以 "),s("code",[t._v("len")]),t._v(" 为个数个项，那么只要："),s("code",[t._v("slice1 := make([]type, len, cap)")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("make()")]),t._v(" 的使用方式是："),s("code",[t._v("func make([]T, len, cap)")]),t._v("，其中 "),s("code",[t._v("cap")]),t._v(" 是可选参数。")]),t._v(" "),s("p",[t._v("所以下面两种方法可以生成相同的切片:")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("下图描述了使用 "),s("code",[t._v("make()")]),t._v(" 方法生成的切片的内存结构：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(446)}}),t._v(" "),s("p",[t._v("示例 7.8 "),s("a",{attrs:{href:"examples/chapter_7/make_slice.go"}},[t._v("make_slice.go")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" slice1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// load the array/slice:")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tslice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" i\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print the slice:")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Slice at %d is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\nThe length of slice1 is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The capacity of slice1 is %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("Slice at 0 is 0  \nSlice at 1 is 5  \nSlice at 2 is 10  \nSlice at 3 is 15  \nSlice at 4 is 20  \nSlice at 5 is 25  \nSlice at 6 is 30  \nSlice at 7 is 35  \nSlice at 8 is 40  \nSlice at 9 is 45  \n\nThe length of slice1 is 10  \nThe capacity of slice1 is 10  \n")])])]),s("p",[t._v("因为字符串是纯粹不可变的字节数组，它们也可以被切分成切片。")]),t._v(" "),s("p",[t._v("练习 7.4： "),s("a",{attrs:{href:"examples/chapter_7/fibonacci_funcarray.go"}},[t._v("fibonacci_funcarray.go")]),t._v(": 为练习 7.3 写一个新的版本，主函数调用一个使用序列个数作为参数的函数，该函数返回一个大小为序列个数的 Fibonacci 切片。")]),t._v(" "),s("h2",{attrs:{id:"_7-2-4-new-和-make-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-4-new-和-make-的区别"}},[t._v("#")]),t._v(" 7.2.4 new() 和 make() 的区别")]),t._v(" "),s("p",[t._v("看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("new(T)")]),t._v(" 为每个新的类型 "),s("code",[t._v("T")]),t._v(" 分配一片内存，初始化为 "),s("code",[t._v("0")]),t._v(" 并且返回类型为 "),s("code",[t._v("*T")]),t._v(" 的内存地址：这种方法 "),s("strong",[t._v("返回一个指向类型为 "),s("code",[t._v("T")]),t._v("，值为 "),s("code",[t._v("0")]),t._v(" 的地址的指针")]),t._v("，它适用于值类型如数组和结构体（参见"),s("RouterLink",{attrs:{to:"/the-way-to-go/10.0.html"}},[t._v("第 10 章")]),t._v("）；它相当于 "),s("code",[t._v("&T{}")]),t._v("。")],1),t._v(" "),s("li",[s("code",[t._v("make(T)")]),t._v(" "),s("strong",[t._v("返回一个类型为 T 的初始值")]),t._v("，它只适用于 3 种内建的引用类型：切片、"),s("code",[t._v("map")]),t._v(" 和 "),s("code",[t._v("channel")]),t._v("（参见"),s("RouterLink",{attrs:{to:"/the-way-to-go/08.0.html"}},[t._v("第 8 章")]),t._v("和"),s("RouterLink",{attrs:{to:"/the-way-to-go/13.0.html"}},[t._v("第 13 章")]),t._v("）。")],1)]),t._v(" "),s("p",[t._v("换言之，"),s("code",[t._v("new()")]),t._v(" 函数分配内存，"),s("code",[t._v("make()")]),t._v(" 函数初始化；下图给出了区别：")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:a(447)}}),t._v(" "),s("p",[t._v("在图 7.3 的第一幅图中：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// *p == nil; with len and cap 0")]),t._v("\np "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在第二幅图中， "),s("code",[t._v("p := make([]int, 0)")]),t._v(" ，切片 已经被初始化，但是指向一个空的数组。")]),t._v(" "),s("p",[t._v("以上两种方式实用性都不高。下面的方法：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("或者")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这样分配一个有 50 个 "),s("code",[t._v("int")]),t._v(" 值的数组，并且创建了一个长度为 10，容量为 50 的切片 "),s("code",[t._v("v")]),t._v("，该切片指向数组的前 10 个元素。")]),t._v(" "),s("p",[s("strong",[t._v("问题 7.3")]),t._v(" 给定 "),s("code",[t._v("s := make([]byte, 5)")]),t._v("，"),s("code",[t._v("len(s)")]),t._v(" 和 "),s("code",[t._v("cap(s)")]),t._v(" 分别是多少？"),s("code",[t._v("s = s[2:4]")]),t._v("，"),s("code",[t._v("len(s)")]),t._v(" 和 "),s("code",[t._v("cap(s)")]),t._v(" 又分别是多少？")]),t._v(" "),s("p",[s("strong",[t._v("问题 7.4")]),t._v(" 假设 "),s("code",[t._v("s1 := []byte{'p', 'o', 'e', 'm'}")]),t._v(" 且 "),s("code",[t._v("s2 := s1[2:]")]),t._v("，"),s("code",[t._v("s2")]),t._v(" 的值是多少？如果我们执行 "),s("code",[t._v("s2[1] = 't'")]),t._v("，"),s("code",[t._v("s1")]),t._v(" 和 "),s("code",[t._v("s2")]),t._v(" 现在的值又分别是多少？")]),t._v(" "),s("p",[s("em",[t._v("译者注：如何理解 new、make、slice、map、channel 的关系")])]),t._v(" "),s("p",[s("em",[t._v("1.slice、map 以及 channel 都是 golang 内建的一种引用类型，三者在内存中存在多个组成部分，\n需要对内存组成部分初始化后才能使用，而 make 就是对三者进行初始化的一种操作方式")])]),t._v(" "),s("p",[s("em",[t._v("2. new 获取的是存储指定变量内存地址的一个变量，对于变量内部结构并不会执行相应的初始化操作，\n所以 slice、map、channel 需要 make 进行初始化并获取对应的内存地址，而非 new 简单的获取内存地址")])]),t._v(" "),s("h2",{attrs:{id:"_7-2-5-多维切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-5-多维切片"}},[t._v("#")]),t._v(" 7.2.5 多维切片")]),t._v(" "),s("p",[t._v("和数组一样，切片通常也是一维的，但是也可以由一维组合成高维。通过分片的分片（或者切片的数组），长度可以任意动态变化，所以 Go 语言的多维切片可以任意切分。而且，内层的切片必须单独分配（通过 "),s("code",[t._v("make()")]),t._v(" 函数）。")]),t._v(" "),s("h2",{attrs:{id:"_7-2-6-bytes-包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-6-bytes-包"}},[t._v("#")]),t._v(" 7.2.6 bytes 包")]),t._v(" "),s("p",[t._v("类型 "),s("code",[t._v("[]byte")]),t._v(" 的切片十分常见，Go 语言有一个 "),s("code",[t._v("bytes")]),t._v(" 包专门用来提供这种类型的操作方法。")]),t._v(" "),s("p",[s("code",[t._v("bytes")]),t._v(" 包和字符串包十分类似（参见"),s("RouterLink",{attrs:{to:"/the-way-to-go/04.7.html"}},[t._v("第 4.7 节")]),t._v("）。而且它还包含一个十分有用的类型 "),s("code",[t._v("Buffer")]),t._v(":")],1),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bytes"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Buffer "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这是一个长度可变的 "),s("code",[t._v("bytes")]),t._v(" 的 buffer，提供 "),s("code",[t._v("Read()")]),t._v(" 和 "),s("code",[t._v("Write()")]),t._v(" 方法，因为读写长度未知的 "),s("code",[t._v("bytes")]),t._v(" 最好使用 "),s("code",[t._v("buffer")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("Buffer")]),t._v(" 可以这样定义："),s("code",[t._v("var buffer bytes.Buffer")]),t._v("。")]),t._v(" "),s("p",[t._v("或者使用 "),s("code",[t._v("new()")]),t._v(" 获得一个指针："),s("code",[t._v("var r *bytes.Buffer = new(bytes.Buffer)")]),t._v("。")]),t._v(" "),s("p",[t._v("或者通过函数："),s("code",[t._v("func NewBuffer(buf []byte) *Buffer")]),t._v("，创建一个 "),s("code",[t._v("Buffer")]),t._v(" 对象并且用 "),s("code",[t._v("buf")]),t._v(" 初始化好；"),s("code",[t._v("NewBuffer")]),t._v(" 最好用在从 "),s("code",[t._v("buf")]),t._v(" 读取的时候使用。")]),t._v(" "),s("p",[s("strong",[t._v("通过 buffer 串联字符串")])]),t._v(" "),s("p",[t._v("类似于 Java 的 StringBuilder 类。")]),t._v(" "),s("p",[t._v("在下面的代码段中，我们创建一个 "),s("code",[t._v("buffer")]),t._v("，通过 "),s("code",[t._v("buffer.WriteString(s)")]),t._v(" 方法将字符串 "),s("code",[t._v("s")]),t._v(" 追加到后面，最后再通过 "),s("code",[t._v("buffer.String()")]),t._v(" 方法转换为 "),s("code",[t._v("string")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" buffer bytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Buffer\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNextString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//method getNextString() not shown here")]),t._v("\n\t\tbuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这种实现方式比使用 "),s("code",[t._v("+=")]),t._v(" 要更节省内存和 CPU，尤其是要串联的字符串数目特别多的时候。")]),t._v(" "),s("p",[s("strong",[t._v("练习 7.5")])]),t._v(" "),s("p",[t._v("给定切片 "),s("code",[t._v("sl")]),t._v("，将一个 "),s("code",[t._v("[]byte")]),t._v(" 数组追加到 "),s("code",[t._v("sl")]),t._v(" 后面。写一个函数 "),s("code",[t._v("Append(slice, data []byte) []byte")]),t._v("，该函数在 "),s("code",[t._v("sl")]),t._v(" 不能存储更多数据的时候自动扩容。")]),t._v(" "),s("p",[s("strong",[t._v("练习 7.6")])]),t._v(" "),s("p",[t._v("把一个缓存 "),s("code",[t._v("buf")]),t._v(" 分片成两个切片：第一个是前 "),s("code",[t._v("n")]),t._v(" 个 bytes，后一个是剩余的，用一行代码实现。")]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/07.1.html"}},[t._v("声明和初始化")])],1),t._v(" "),s("li",[t._v("下一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/07.3.html"}},[t._v("For-range 结构")])],1)])])}),[],!1,null,null,null);s.default=e.exports},445:function(t,s,a){t.exports=a.p+"assets/img/7.2_fig7.2.da516048.png"},446:function(t,s,a){t.exports=a.p+"assets/img/7.2_fig7.2.1.eafc4d03.png"},447:function(t,s,a){t.exports=a.p+"assets/img/7.2_fig7.3.87c54420.png"}}]);