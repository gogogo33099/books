(window.webpackJsonp=window.webpackJsonp||[]).push([[296],{727:function(e,t,s){"use strict";s.r(t);var n=s(14),a=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_13-5-几点忠告"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-几点忠告"}},[e._v("#")]),e._v(" 13.5. 几点忠告")]),e._v(" "),t("p",[e._v("我们在前一章结尾的时候，我们警告要谨慎使用reflect包。那些警告同样适用于本章的unsafe包。")]),e._v(" "),t("p",[e._v("高级语言使得程序员不用再关心真正运行程序的指令细节，同时也不再需要关注许多如内存布局之类的实现细节。因为高级语言这个绝缘的抽象层，我们可以编写安全健壮的，并且可以运行在不同操作系统上的具有高度可移植性的程序。")]),e._v(" "),t("p",[e._v("但是unsafe包，它让程序员可以透过这个绝缘的抽象层直接使用一些必要的功能，虽然可能是为了获得更好的性能。但是代价就是牺牲了可移植性和程序安全，因此使用unsafe包是一个危险的行为。我们对何时以及如何使用unsafe包的建议和我们在11.5节提到的Knuth对过早优化的建议类似。大多数Go程序员可能永远不会需要直接使用unsafe包。当然，也永远都会有一些需要使用unsafe包实现会更简单的场景。如果确实认为使用unsafe包是最理想的方式，那么应该尽可能将它限制在较小的范围，这样其它代码就可以忽略unsafe的影响。")]),e._v(" "),t("p",[e._v("现在，赶紧将最后两章抛入脑后吧。编写一些实实在在的应用是真理。请远离reflect和unsafe包，除非你确实需要它们。")]),e._v(" "),t("p",[e._v("最后，用Go快乐地编程。我们希望你能像我们一样喜欢Go语言。")])])}),[],!1,null,null,null);t.default=a.exports}}]);