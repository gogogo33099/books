(window.webpackJsonp=window.webpackJsonp||[]).push([[666],{1146:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_15-2-一个简单的-web-服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-一个简单的-web-服务器"}},[t._v("#")]),t._v(" 15.2 一个简单的 web 服务器")]),t._v(" "),s("p",[t._v("http 是比 tcp 更高层的协议，它描述了网页服务器如何与客户端浏览器进行通信。Go 提供了 "),s("code",[t._v("net/http")]),t._v(" 包，我们马上就来看下。先从一些简单的示例开始，首先编写一个“Hello world!”网页服务器："),s("a",{attrs:{href:"examples/chapter_15/hello_world_webserver.go"}},[t._v("查看示例 15.6")])]),t._v(" "),s("p",[t._v("我们引入了 "),s("code",[t._v("http")]),t._v(" 包并启动了网页服务器，和 "),s("RouterLink",{attrs:{to:"/the-way-to-go/15.1.html"}},[t._v("15.1 节")]),t._v("的 "),s("code",[t._v('net.Listen("tcp", "localhost:50000")')]),t._v(" 函数的 tcp 服务器是类似的，使用 "),s("code",[t._v('http.ListenAndServe("localhost:8080", nil)')]),t._v(" 函数，如果成功会返回空，否则会返回一个错误（地址 "),s("code",[t._v("localhost")]),t._v(" 部分可以省略，"),s("code",[t._v("8080")]),t._v(" 是指定的端口号）。")],1),t._v(" "),s("p",[s("code",[t._v("http.URL")]),t._v(" 用于表示网页地址，其中字符串属性 "),s("code",[t._v("Path")]),t._v(" 用于保存 url 的路径；"),s("code",[t._v("http.Request")]),t._v(" 描述了客户端请求，内含一个 "),s("code",[t._v("URL")]),t._v(" 字段。")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("req")]),t._v(" 是来自 html 表单的 POST 类型请求，"),s("code",[t._v("“var1”")]),t._v(" 是该表单中一个输入域的名称，那么用户输入的值就可以通过 Go 代码 "),s("code",[t._v('req.FormValue("var1")')]),t._v(" 获取到（见 "),s("RouterLink",{attrs:{to:"/the-way-to-go/15.4.html"}},[t._v("15.4 节")]),t._v("）。还有一种方法是先执行 "),s("code",[t._v("request.ParseForm()")]),t._v("，然后再获取 "),s("code",[t._v('request.Form["var1"]')]),t._v(" 的第一个返回参数，就像这样：")],1),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" found "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Form"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("第二个参数 "),s("code",[t._v("found")]),t._v(" 为 "),s("code",[t._v("true")]),t._v("。如果 "),s("code",[t._v("var1")]),t._v(" 并未出现在表单中，"),s("code",[t._v("found")]),t._v(" 就是 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("p",[t._v("表单属性实际上是 "),s("code",[t._v("map[string][]string")]),t._v(" 类型。网页服务器发送一个 "),s("code",[t._v("http.Response")]),t._v(" 响应，它是通过 "),s("code",[t._v("http.ResponseWriter")]),t._v(" 对象输出的，后者组装了 HTTP 服务器响应，通过对其写入内容，我们就将数据发送给了 HTTP 客户端。")]),t._v(" "),s("p",[t._v("现在我们仍然要编写程序，以实现服务器必须做的事，即如何处理请求。这是通过 "),s("code",[t._v("http.HandleFunc()")]),t._v(" 函数完成的。在这个例子中，当根路径“/”（url 地址是 "),s("code",[t._v("http://localhost:8080")]),t._v("）被请求的时候（或者这个服务器上的其他任意地址），"),s("code",[t._v("HelloServer()")]),t._v(" 函数就被执行了。这个函数是 "),s("code",[t._v("http.HandlerFunc")]),t._v(" 类型的，它们通常被命名为 Prefhandler，和某个路径前缀 Pref 匹配。")]),t._v(" "),s("p",[s("code",[t._v("http.HandleFunc")]),t._v(" 注册了一个处理函数（这里是 "),s("code",[t._v("HelloServer()")]),t._v("）来处理对应 "),s("code",[t._v("/")]),t._v(" 的请求。")]),t._v(" "),s("p",[s("code",[t._v("/")]),t._v(" 可以被替换为其他更特定的 url，比如 "),s("code",[t._v("/create")]),t._v("，"),s("code",[t._v("/edit")]),t._v(" 等等；你可以为每一个特定的 url 定义一个单独的处理函数。这个函数需要两个参数：第一个是 "),s("code",[t._v("ReponseWriter")]),t._v(" 类型的 "),s("code",[t._v("w")]),t._v("；第二个是请求 "),s("code",[t._v("req")]),t._v("。程序向 "),s("code",[t._v("w")]),t._v(" 写入了 "),s("code",[t._v("Hello")]),t._v(" 和 "),s("code",[t._v("r.URL.Path[1:]")]),t._v(" 组成的字符串：末尾的 "),s("code",[t._v("[1:]")]),t._v(" 表示“创建一个从索引为 1 的字符到结尾的子切片”，用来丢弃路径开头的“/”，"),s("code",[t._v("fmt.Fprintf()")]),t._v(" 函数完成了本次写入（见 "),s("RouterLink",{attrs:{to:"/the-way-to-go/12.8.html"}},[t._v("12.8 节")]),t._v("）；另一种可行的写法是 "),s("code",[t._v('io.WriteString(w, "hello, world!\\n")')]),t._v("。")],1),t._v(" "),s("p",[t._v("总结：第一个参数是请求的路径，第二个参数是当路径被请求时，需要调用的处理函数的引用。")]),t._v(" "),s("p",[t._v("示例 15.6 "),s("a",{attrs:{href:"examples/chapter_15/hello_world_webserver.go"}},[t._v("hello_world_webserver.go")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"log"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net/http"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HelloServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" req "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Inside HelloServer handler"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello,"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("URL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\thttp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandleFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" HelloServer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\terr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListenAndServe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:8080"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ListenAndServe: "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("使用命令行启动程序，会打开一个命令窗口显示如下文字：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Starting Process E:/Go/GoBoek/code_examples/chapter_14/hello_world_webserver.exe...\n")])])]),s("p",[t._v("然后打开浏览器并输入 url 地址："),s("code",[t._v("http://localhost:8080/world")]),t._v("，浏览器就会出现文字："),s("code",[t._v("Hello, world")]),t._v("，网页服务器会响应你在 "),s("code",[t._v(":8080/")]),t._v(" 后边输入的内容。")]),t._v(" "),s("p",[s("code",[t._v("fmt.Println()")]),t._v(" 在服务器端控制台打印状态；在每个处理函数被调用时，把请求记录下来也许更为有用。")]),t._v(" "),s("p",[t._v("注：\n1）前两行（没有错误处理代码）可以替换成以下写法：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListenAndServe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('":8080"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HandlerFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HelloServer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("2）"),s("code",[t._v("fmt.Fprint()")]),t._v(" 和 "),s("code",[t._v("fmt.Fprintf()")]),t._v(" 都是可以用来写入 "),s("code",[t._v("http.ResponseWriter")]),t._v(" 的函数（他们实现了 "),s("code",[t._v("io.Writer")]),t._v("）。")]),t._v(" "),s("p",[t._v("比如我们可以使用")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<h1>%s</h1><div>%s</div>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("来构建一个非常简单的网页并插入 "),s("code",[t._v("title")]),t._v(" 和 "),s("code",[t._v("body")]),t._v(" 的值。")]),t._v(" "),s("p",[t._v("如果你需要更多复杂的替换，使用模板包（见 "),s("RouterLink",{attrs:{to:"/the-way-to-go/15.7.html"}},[t._v("15.7节")]),t._v("）")],1),t._v(" "),s("p",[t._v("3）如果你需要使用安全的 https 连接，使用 "),s("code",[t._v("http.ListenAndServeTLS()")]),t._v(" 代替 "),s("code",[t._v("http.ListenAndServe()")])]),t._v(" "),s("p",[t._v("4）除了 "),s("code",[t._v('http.HandleFunc("/", Hfunc)')]),t._v("，其中的 "),s("code",[t._v("HFunc")]),t._v(" 是一个处理函数，签名为：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" req "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("也可以使用这种方式："),s("code",[t._v('http.Handle("/", http.HandlerFunc(HFunc))')])]),t._v(" "),s("p",[s("code",[t._v("HandlerFunc")]),t._v(" 只是定义了上述 "),s("code",[t._v("HFunc")]),t._v(" 签名的别名：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" HandlerFunc "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ResponseWriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("它是一个可以把普通的函数当做 HTTP 处理器 ("),s("code",[t._v("Handler")]),t._v(") 的适配器。如果函数 "),s("code",[t._v("f")]),t._v(" 声明得合适，"),s("code",[t._v("HandlerFunc(f)")]),t._v(" 就是一个执行 "),s("code",[t._v("f")]),t._v(" 函数的 "),s("code",[t._v("Handler")]),t._v(" 对象。")]),t._v(" "),s("p",[s("code",[t._v("http.Handle()")]),t._v(" 的第二个参数也可以是 "),s("code",[t._v("T")]),t._v(" 类型的对象 "),s("code",[t._v("obj")]),t._v("："),s("code",[t._v('http.Handle("/", obj)')]),t._v("。")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("T")]),t._v(" 有 "),s("code",[t._v("ServeHTTP()")]),t._v(" 方法，那就实现了 http 的 "),s("code",[t._v("Handler")]),t._v(" 接口：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Typ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ServeHTTP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseWriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" req "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个用法也在 "),s("RouterLink",{attrs:{to:"/the-way-to-go/15.8.html"}},[t._v("15.8 节")]),t._v(" "),s("code",[t._v("Counter")]),t._v(" 和 "),s("code",[t._v("Chan")]),t._v(" 类型上使用。只要实现了 "),s("code",[t._v("http.Handler")]),t._v("，"),s("code",[t._v("http")]),t._v(" 包就可以处理任何 HTTP 请求。")],1),t._v(" "),s("p",[t._v("练习 15.2："),s("a",{attrs:{href:"exercises/chapter_15/webhello2.go"}},[t._v("webhello2.go")])]),t._v(" "),s("p",[t._v("编写一个网页服务器监听端口 9999，有如下处理函数：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当请求 "),s("code",[t._v("http://localhost:9999/hello/Name")]),t._v(" 时，响应："),s("code",[t._v("hello Name")]),t._v("（"),s("code",[t._v("Name")]),t._v(" 需是一个合法的姓，比如 Chris 或者 Madeleine）")])]),t._v(" "),s("li",[s("p",[t._v("当请求 "),s("code",[t._v("http://localhost:9999/shouthello/Name")]),t._v(" 时，响应："),s("code",[t._v("hello NAME")])])])]),t._v(" "),s("p",[t._v("练习 15.3："),s("a",{attrs:{href:"exercises/chapter_15/hello_server.go"}},[t._v("hello_server.go")])]),t._v(" "),s("p",[t._v("创建一个空结构 "),s("code",[t._v("hello")]),t._v(" 并为它实现 "),s("code",[t._v("http.Handler")]),t._v("。运行并测试。")]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/15.1.html"}},[t._v("tcp 服务器")])],1),t._v(" "),s("li",[t._v("下一节："),s("RouterLink",{attrs:{to:"/the-way-to-go/15.3.html"}},[t._v("访问并读取页面数据")])],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);