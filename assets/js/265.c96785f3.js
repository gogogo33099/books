(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{687:function(o,e,v){"use strict";v.r(e);var _=v(14),t=Object(_.a)({},(function(){var o=this,e=o._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h1",{attrs:{id:"_1-1-hello-world"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-hello-world"}},[o._v("#")]),o._v(" 1.1. Hello, World")]),o._v(" "),e("p",[o._v("我们以现已成为传统的“hello world”案例来开始吧，这个例子首次出现于 1978 年出版的 C 语言圣经 "),e("a",{attrs:{href:"http://s3-us-west-2.amazonaws.com/belllabs-microsite-dritchie/cbook/index.html",target:"_blank",rel:"noopener noreferrer"}},[o._v("《The C Programming Language》"),e("OutboundLink")],1),o._v("（译注：本书作者之一 Brian W. Kernighan 也是《The C Programming Language》一书的作者）。C 语言是直接影响 Go 语言设计的语言之一。这个例子体现了 Go 语言一些核心理念。")]),o._v(" "),e("p",[e("u",[e("i",[o._v("gopl.io/ch1/helloworld")])])]),o._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[o._v("package")]),o._v(" main\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[o._v("import")]),o._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[o._v('"fmt"')]),o._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[o._v("func")]),o._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[o._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v(")")]),o._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("{")]),o._v("\n\tfmt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[o._v("Println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[o._v('"Hello, 世界"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v(")")]),o._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("}")]),o._v("\n")])])]),e("p",[o._v("Go 是一门编译型语言，Go 语言的工具链将源代码及其依赖转换成计算机的机器指令（译注：静态编译）。Go 语言提供的工具都通过一个单独的命令 "),e("code",[o._v("go")]),o._v(" 调用，"),e("code",[o._v("go")]),o._v(" 命令有一系列子命令。最简单的一个子命令就是 "),e("code",[o._v("run")]),o._v("。这个命令编译一个或多个以。"),e("code",[o._v(".go")]),o._v(" 结尾的源文件，链接库文件，并运行最终生成的可执行文件。（本书使用$表示命令行提示符。）")]),o._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[o._v("$ go run helloworld.go\n")])])]),e("p",[o._v("毫无意外，这个命令会输出：")]),o._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("Hello, 世界\n")])])]),e("p",[o._v("Go 语言原生支持 Unicode，它可以处理全世界任何语言的文本。")]),o._v(" "),e("p",[o._v("如果不只是一次性实验，你肯定希望能够编译这个程序，保存编译结果以备将来之用。可以用 "),e("code",[o._v("build")]),o._v(" 子命令：")]),o._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[o._v("$ go build helloworld.go\n")])])]),e("p",[o._v("这个命令生成一个名为 "),e("code",[o._v("helloworld")]),o._v(" 的可执行的二进制文件（译注：Windows 系统下生成的可执行文件是 "),e("code",[o._v("helloworld.exe")]),o._v("，增加了 "),e("code",[o._v(".exe")]),o._v(" 后缀名），之后你可以随时运行它（译注：在 Windows 系统下在命令行直接输入 "),e("code",[o._v("helloworld.exe")]),o._v(" 命令运行），不需任何处理（译注：因为静态编译，所以不用担心在系统库更新的时候冲突，幸福感满满）。")]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("$ ./helloworld\nHello, 世界\n")])])]),e("p",[o._v("本书中所有示例代码上都有一行标记，利用这些标记可以从 "),e("a",{attrs:{href:"http://gopl.io",target:"_blank",rel:"noopener noreferrer"}},[o._v("gopl.io"),e("OutboundLink")],1),o._v(" 网站上本书源码仓库里获取代码：")]),o._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("gopl.io/ch1/helloworld\n")])])]),e("p",[o._v("执行 "),e("code",[o._v("go get gopl.io/ch1/helloworld")]),o._v(" 命令，就会从网上获取代码，并放到对应目录中（需要先安装 Git 或 Hg 之类的版本管理工具，并将对应的命令添加到 "),e("code",[o._v("PATH")]),o._v(" 环境变量中。序言已经提及，需要先设置好 "),e("code",[o._v("GOPATH")]),o._v(" 环境变量，下载的代码会放在 "),e("code",[o._v("$GOPATH/src/gopl.io/ch1/helloworld")]),o._v(" 目录）。"),e("RouterLink",{attrs:{to:"/gopl/ch2/ch2-06.html"}},[o._v("2.6")]),o._v(" 和 "),e("RouterLink",{attrs:{to:"/gopl/ch10/ch10-07.html"}},[o._v("10.7 节")]),o._v("有这方面更详细的介绍。")],1),o._v(" "),e("p",[o._v("来讨论下程序本身。Go 语言的代码通过"),e("strong",[o._v("包")]),o._v("（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。一个包由位于单个目录下的一个或多个 "),e("code",[o._v(".go")]),o._v(" 源代码文件组成，目录定义包的作用。每个源文件都以一条 "),e("code",[o._v("package")]),o._v(" 声明语句开始，这个例子里就是 "),e("code",[o._v("package main")]),o._v("，表示该文件属于哪个包，紧跟着一系列导入（import）的包，之后是存储在这个文件里的程序语句。")]),o._v(" "),e("p",[o._v("Go 的标准库提供了 100 多个包，以支持常见功能，如输入、输出、排序以及文本处理。比如 "),e("code",[o._v("fmt")]),o._v(" 包，就含有格式化输出、接收输入的函数。"),e("code",[o._v("Println")]),o._v(" 是其中一个基础函数，可以打印以空格间隔的一个或多个值，并在最后添加一个换行符，从而输出一整行。")]),o._v(" "),e("p",[e("code",[o._v("main")]),o._v(" 包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在 "),e("code",[o._v("main")]),o._v(" 里的 "),e("code",[o._v("main")]),o._v(" "),e("em",[o._v("函数")]),o._v("也很特殊，它是整个程序执行时的入口（译注：C 系语言差不多都这样）。"),e("code",[o._v("main")]),o._v(" 函数所做的事情就是程序做的。当然了，"),e("code",[o._v("main")]),o._v(" 函数一般调用其它包里的函数完成很多工作（如："),e("code",[o._v("fmt.Println")]),o._v("）。")]),o._v(" "),e("p",[o._v("必须告诉编译器源文件需要哪些包，这就是跟随在 "),e("code",[o._v("package")]),o._v(" 声明后面的 "),e("code",[o._v("import")]),o._v(" 声明扮演的角色。"),e("code",[o._v("hello world")]),o._v(" 例子只用到了一个包，大多数程序需要导入多个包。")]),o._v(" "),e("p",[o._v("必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。这项严格要求避免了程序开发过程中引入未使用的包（译注：Go 语言编译过程没有警告信息，争议特性之一）。")]),o._v(" "),e("p",[e("code",[o._v("import")]),o._v(" 声明必须跟在文件的 "),e("code",[o._v("package")]),o._v(" 声明之后。随后，则是组成程序的函数、变量、常量、类型的声明语句（分别由关键字 "),e("code",[o._v("func")]),o._v("、"),e("code",[o._v("var")]),o._v("、"),e("code",[o._v("const")]),o._v("、"),e("code",[o._v("type")]),o._v(" 定义）。这些内容的声明顺序并不重要（译注：最好还是定一下规范）。这个例子的程序已经尽可能短了，只声明了一个函数，其中只调用了一个其他函数。为了节省篇幅，有些时候示例程序会省略 "),e("code",[o._v("package")]),o._v(" 和 "),e("code",[o._v("import")]),o._v(" 声明，但是，这些声明在源代码里有，并且必须得有才能编译。")]),o._v(" "),e("p",[o._v("一个函数的声明由 "),e("code",[o._v("func")]),o._v(" 关键字、函数名、参数列表、返回值列表（这个例子里的 "),e("code",[o._v("main")]),o._v(" 函数参数列表和返回值都是空的）以及包含在大括号里的函数体组成。第五章进一步考察函数。")]),o._v(" "),e("p",[o._v("Go 语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。实际上，编译器会主动把特定符号后的换行符转换为分号，因此换行符添加的位置会影响 Go 代码的正确解析（译注：比如行末是标识符、整数、浮点数、虚数、字符或字符串文字、关键字 "),e("code",[o._v("break")]),o._v("、"),e("code",[o._v("continue")]),o._v("、"),e("code",[o._v("fallthrough")]),o._v("或 "),e("code",[o._v("return")]),o._v(" 中的一个、运算符和分隔符 "),e("code",[o._v("++")]),o._v("、"),e("code",[o._v("--")]),o._v("、"),e("code",[o._v(")")]),o._v("、"),e("code",[o._v("]")]),o._v(" 或 "),e("code",[o._v("}")]),o._v(" 中的一个）。举个例子，函数的左括号 "),e("code",[o._v("{")]),o._v(" 必须和 "),e("code",[o._v("func")]),o._v(" 函数声明在同一行上，且位于末尾，不能独占一行，而在表达式 "),e("code",[o._v("x+y")]),o._v(" 中，可在 "),e("code",[o._v("+")]),o._v(" 后换行，不能在 "),e("code",[o._v("+")]),o._v(" 前换行（译注：以+结尾的话不会被插入分号分隔符，但是以 x 结尾的话则会被分号分隔符，从而导致编译错误）。")]),o._v(" "),e("p",[o._v("Go 语言在代码格式上采取了很强硬的态度。"),e("code",[o._v("gofmt")]),o._v("工具把代码格式化为标准格式（译注：这个格式化工具没有任何可以调整代码格式的参数，Go 语言就是这么任性），并且 "),e("code",[o._v("go")]),o._v(" 工具中的 "),e("code",[o._v("fmt")]),o._v(" 子命令会对指定包，否则默认为当前目录中所有。go 源文件应用 "),e("code",[o._v("gofmt")]),o._v(" 命令。本书中的所有代码都被 gofmt 过。你也应该养成格式化自己的代码的习惯。以法令方式规定标准的代码格式可以避免无尽的无意义的琐碎争执（译注：也导致了 Go 语言的 TIOBE 排名较低，因为缺少撕逼的话题）。更重要的是，这样可以做多种自动源码转换，如果放任 Go 语言代码格式，这些转换就不大可能了。")]),o._v(" "),e("p",[o._v("很多文本编辑器都可以配置为保存文件时自动执行 "),e("code",[o._v("gofmt")]),o._v("，这样你的源代码总会被恰当地格式化。还有个相关的工具："),e("code",[o._v("goimports")]),o._v("，可以根据代码需要，自动地添加或删除 "),e("code",[o._v("import")]),o._v(" 声明。这个工具并没有包含在标准的分发包中，可以用下面的命令安装：")]),o._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[o._v("$ go get golang.org/x/tools/cmd/goimports\n")])])]),e("p",[o._v("对于大多数用户来说，下载、编译包、运行测试用例、察看 Go 语言的文档等等常用功能都可以用 go 的工具完成。"),e("RouterLink",{attrs:{to:"/gopl/ch10/ch10-07.html"}},[o._v("10.7 节")]),o._v("详细介绍这些知识。")],1)])}),[],!1,null,null,null);e.default=t.exports}}]);