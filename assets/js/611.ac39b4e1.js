(window.webpackJsonp=window.webpackJsonp||[]).push([[611],{1086:function(t,_,o){"use strict";o.r(_);var v=o(14),a=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_11-13-总结-go-中的面向对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-13-总结-go-中的面向对象"}},[t._v("#")]),t._v(" 11.13 总结：Go 中的面向对象")]),t._v(" "),_("p",[t._v("我们总结一下前面看到的：Go 没有类，而是松耦合的类型、方法对接口的实现。")]),t._v(" "),_("p",[t._v("OO 语言最重要的三个方面分别是：封装、继承和多态，在 Go 中它们是怎样表现的呢？")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("封装（数据隐藏）：和别的 OO 语言有 4 个或更多的访问层次相比，Go 把它简化为了 2 层（参见 "),_("RouterLink",{attrs:{to:"/the-way-to-go/04.2.html"}},[t._v("4.2 节")]),t._v("的可见性规则）:")],1),t._v(" "),_("p",[t._v("1）包范围内的：通过标识符首字母小写，"),_("em",[t._v("对象")]),t._v("只在它所在的包内可见")]),t._v(" "),_("p",[t._v("2）可导出的：通过标识符首字母大写，"),_("em",[t._v("对象")]),t._v("对所在包以外也可见")])])]),t._v(" "),_("p",[t._v("类型只拥有自己所在包中定义的方法。")]),t._v(" "),_("ul",[_("li",[t._v("继承：用组合实现：内嵌一个（或多个）包含想要的行为（字段和方法）的类型；多重继承可以通过内嵌多个类型实现")]),t._v(" "),_("li",[t._v("多态：用接口实现：某个类型的实例可以赋给它所实现的任意接口类型的变量。类型和接口是松耦合的，并且多重继承可以通过实现多个接口实现。Go 接口不是 Java 和 C# 接口的变体，而且接口间是不相关的，并且是大规模编程和可适应的演进型设计的关键。")])]),t._v(" "),_("h2",{attrs:{id:"链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),_("ul",[_("li",[_("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),_("li",[t._v("上一节："),_("RouterLink",{attrs:{to:"/the-way-to-go/11.12.html"}},[t._v("接口与动态类型")])],1),t._v(" "),_("li",[t._v("下一节："),_("RouterLink",{attrs:{to:"/the-way-to-go/11.14.html"}},[t._v("结构体，集合和高阶函数")])],1)])])}),[],!1,null,null,null);_.default=a.exports}}]);