(window.webpackJsonp=window.webpackJsonp||[]).push([[634],{1110:function(t,a,s){"use strict";s.r(a);var n=s(14),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_13-0-错误处理与测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-0-错误处理与测试"}},[t._v("#")]),t._v(" 13.0 错误处理与测试")]),t._v(" "),a("p",[t._v("Go 没有像 Java 和 .NET 那样的 "),a("code",[t._v("try/catch")]),t._v(" 异常机制：不能执行抛异常操作。但是有一套 "),a("code",[t._v("defer-panic-and-recover")]),t._v(" 机制（参见 "),a("RouterLink",{attrs:{to:"/the-way-to-go/13.2.html"}},[t._v("13.2")]),t._v("-"),a("RouterLink",{attrs:{to:"/the-way-to-go/13.3.html"}},[t._v("13.3")]),t._v(" 节）。")],1),t._v(" "),a("p",[t._v("Go 的设计者觉得 "),a("code",[t._v("try/catch")]),t._v(" 机制的使用太泛滥了，而且从底层向更高的层级抛异常太耗费资源。他们给 Go 设计的机制也可以“捕捉”异常，但是更轻量，并且只应该作为（处理错误的）最后的手段。")]),t._v(" "),a("p",[t._v("Go 是怎么处理普通错误的呢？通过在函数和方法中返回错误对象作为它们的唯一或最后一个返回值——如果返回 "),a("code",[t._v("nil")]),t._v("，则没有错误发生——并且主调 (calling) 函数总是应该检查收到的错误。")]),t._v(" "),a("p",[a("strong",[t._v("永远不要忽略错误，否则可能会导致程序崩溃！！")])]),t._v(" "),a("p",[t._v("处理错误并且在函数发生错误的地方给用户返回错误信息：照这样处理就算真的出了问题，你的程序也能继续运行并且通知给用户。"),a("code",[t._v("panic()")]),t._v(" 和 "),a("code",[t._v("recover()")]),t._v(" 是用来处理真正的异常（无法预测的错误）而不是普通的错误。")]),t._v(" "),a("p",[t._v("库函数通常必须返回某种错误提示给主调函数。")]),t._v(" "),a("p",[t._v("在前面的章节中我们了解了 Go 检查和报告错误条件的惯有方式：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("产生错误的函数会返回两个变量，一个值和一个错误码；如果后者是 "),a("code",[t._v("nil")]),t._v(" 就是成功，非 "),a("code",[t._v("nil")]),t._v(" 就是发生了错误。")])]),t._v(" "),a("li",[a("p",[t._v("为了防止发生错误时正在执行的函数（如果有必要的话甚至会是整个程序）被中止，在调用函数后必须检查错误。")])])]),t._v(" "),a("p",[t._v("下面这段来自 "),a("code",[t._v("pack1")]),t._v(" 包的代码 "),a("code",[t._v("Func1()")]),t._v(" 测试了它的返回值：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" pack1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error %s in pack1.Func1 with parameter %v"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" param1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or: return err")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Process(value)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("em",[t._v("为了更清晰的代码，应该总是使用包含错误值变量的 if 复合语句")])]),t._v(" "),a("p",[t._v("上例除了 "),a("code",[t._v("fmt.Printf()")]),t._v(" 还可以使用 "),a("code",[t._v("log")]),t._v(" 中对应的方法（参见 "),a("RouterLink",{attrs:{to:"/the-way-to-go/13.3.html"}},[t._v("13.3")]),t._v(" 节和 "),a("RouterLink",{attrs:{to:"/the-way-to-go/15.2.html"}},[t._v("15.2")]),t._v(" 节），如果程序中止也没关系的话甚至可以使用 "),a("code",[t._v("panic()")]),t._v("（参见后面的章节）。")],1),t._v(" "),a("h2",{attrs:{id:"链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),a("li",[t._v("上一节："),a("RouterLink",{attrs:{to:"/the-way-to-go/12.12.html"}},[t._v("Go 中的密码学")])],1),t._v(" "),a("li",[t._v("下一节："),a("RouterLink",{attrs:{to:"/the-way-to-go/13.1.html"}},[t._v("错误处理")])],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);