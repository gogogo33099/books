(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{692:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_1-2-命令行参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-命令行参数"}},[s._v("#")]),s._v(" 1.2. 命令行参数")]),s._v(" "),t("p",[s._v("大多数的程序都是处理输入，产生输出；这也正是“计算”的定义。但是，程序如何获取要处理的输入数据呢？一些程序生成自己的数据，但通常情况下，输入来自于程序外部：文件、网络连接、其它程序的输出、敲键盘的用户、命令行参数或其它类似输入源。下面几个例子会讨论其中几个输入源，首先是命令行参数。")]),s._v(" "),t("p",[t("code",[s._v("os")]),s._v(" 包以跨平台的方式，提供了一些与操作系统交互的函数和变量。程序的命令行参数可从 "),t("code",[s._v("os")]),s._v(" 包的 "),t("code",[s._v("Args")]),s._v(" 变量获取；"),t("code",[s._v("os")]),s._v(" 包外部使用 "),t("code",[s._v("os.Args")]),s._v(" 访问该变量。")]),s._v(" "),t("p",[t("code",[s._v("os.Args")]),s._v(" 变量是一个字符串（string）的 "),t("em",[s._v("切片")]),s._v("（slice）（译注：slice 和 Python 语言中的切片类似，是一个简版的动态数组），切片是 Go 语言的基础概念，稍后详细介绍。现在先把切片 "),t("code",[s._v("s")]),s._v(" 当作数组元素序列，序列的长度动态变化，用 "),t("code",[s._v("s[i]")]),s._v(" 访问单个元素，用 "),t("code",[s._v("s[m:n]")]),s._v(" 获取子序列（译注：和 Python 里的语法差不多）。序列的元素数目为 "),t("code",[s._v("len(s)")]),s._v("。和大多数编程语言类似，区间索引时，Go 语言里也采用左闭右开形式，即，区间包括第一个索引元素，不包括最后一个，因为这样可以简化逻辑。（译注：比如 "),t("code",[s._v("a=[1,2,3,4,5]")]),s._v(", "),t("code",[s._v("a[0:3]=[1,2,3]")]),s._v("，不包含最后一个元素）。比如 "),t("code",[s._v("s[m:n]")]),s._v(" 这个切片，"),t("code",[s._v("0≤m≤n≤len(s)")]),s._v("，包含 "),t("code",[s._v("n-m")]),s._v(" 个元素。")]),s._v(" "),t("p",[t("code",[s._v("os.Args")]),s._v(" 的第一个元素："),t("code",[s._v("os.Args[0]")]),s._v("，是命令本身的名字；其它的元素则是程序启动时传给它的参数。"),t("code",[s._v("s[m:n]")]),s._v(" 形式的切片表达式，产生从第 "),t("code",[s._v("m")]),s._v(" 个元素到第 "),t("code",[s._v("n-1")]),s._v(" 个元素的切片，下个例子用到的元素包含在 "),t("code",[s._v("os.Args[1:len(os.Args)]")]),s._v(" 切片中。如果省略切片表达式的 "),t("code",[s._v("m")]),s._v(" 或 "),t("code",[s._v("n")]),s._v("，会默认传入 "),t("code",[s._v("0")]),s._v(" 或 "),t("code",[s._v("len(s)")]),s._v("，因此前面的切片可以简写成 "),t("code",[s._v("os.Args[1:]")]),s._v("。")]),s._v(" "),t("p",[s._v("下面是 Unix 里 "),t("code",[s._v("echo")]),s._v(" 命令的一份实现，"),t("code",[s._v("echo")]),s._v(" 把它的命令行参数打印成一行。程序导入了两个包，用括号把它们括起来写成列表形式，而没有分开写成独立的 "),t("code",[s._v("import")]),s._v(" 声明。两种形式都合法，列表形式习惯上用得多。包导入顺序并不重要；"),t("code",[s._v("gofmt")]),s._v(" 工具格式化时按照字母顺序对包名排序。（示例有多个版本时，我们会对示例编号，这样可以明确当前正在讨论的是哪个。）")]),s._v(" "),t("p",[t("u",[t("i",[s._v("gopl.io/ch1/echo1")])])]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Echo1 prints its command-line arguments.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"os"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sep "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\ts "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" sep "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\t\tsep "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("注释语句以 "),t("code",[s._v("//")]),s._v(" 开头。对于程序员来说，"),t("code",[s._v("//")]),s._v(" 之后到行末之间所有的内容都是注释，被编译器忽略。按照惯例，我们在每个包的包声明前添加注释；对于 "),t("code",[s._v("main package")]),s._v("，注释包含一句或几句话，从整体角度对程序做个描述。")]),s._v(" "),t("p",[t("code",[s._v("var")]),s._v(" 声明定义了两个 "),t("code",[s._v("string")]),s._v(" 类型的变量 "),t("code",[s._v("s")]),s._v(" 和 "),t("code",[s._v("sep")]),s._v("。变量会在声明时直接初始化。如果变量没有显式初始化，则被隐式地赋予其类型的 "),t("em",[s._v("零值")]),s._v("（zero value），数值类型是 "),t("code",[s._v("0")]),s._v("，字符串类型是空字符串 "),t("code",[s._v('""')]),s._v("。这个例子里，声明把 "),t("code",[s._v("s")]),s._v(" 和 "),t("code",[s._v("sep")]),s._v(" 隐式地初始化成空字符串。第 2 章再来详细地讲解变量和声明。")]),s._v(" "),t("p",[s._v("对数值类型，Go 语言提供了常规的数值和逻辑运算符。而对 "),t("code",[s._v("string")]),s._v(" 类型，"),t("code",[s._v("+")]),s._v(" 运算符连接字符串（译注：和 C++ 或者 JavaScript 是一样的）。所以表达式："),t("code",[s._v("sep + os.Args[i]")]),s._v(" 表示连接字符串 "),t("code",[s._v("sep")]),s._v(" 和 "),t("code",[s._v("os.Args")]),s._v("。程序中使用的语句："),t("code",[s._v("s+=sep+os.Args[i]")]),s._v(" 是一条 "),t("em",[s._v("赋值语句")]),s._v("，将 "),t("code",[s._v("s")]),s._v(" 的旧值跟 "),t("code",[s._v("sep")]),s._v(" 与 "),t("code",[s._v("os.Args[i]")]),s._v(" 连接后赋值回 "),t("code",[s._v("s")]),s._v("，等价于："),t("code",[s._v("s=s+sep+os.Args[i]")]),s._v("。")]),s._v(" "),t("p",[s._v("运算符 "),t("code",[s._v("+=")]),s._v(" 是赋值运算符（assignment operator），每种数值运算符或逻辑运算符，如 "),t("code",[s._v("+")]),s._v(" 或 "),t("code",[s._v("*")]),s._v("，都有对应的赋值运算符。")]),s._v(" "),t("p",[t("code",[s._v("echo")]),s._v(" 程序可以每循环一次输出一个参数，这个版本却是不断地把新文本追加到末尾来构造字符串。字符串 "),t("code",[s._v("s")]),s._v(" 开始为空，即值为 "),t("code",[s._v('""')]),s._v("，每次循环会添加一些文本；第一次迭代之后，还会再插入一个空格，因此循环结束时每个参数中间都有一个空格。这是一种二次加工（quadratic process），当参数数量庞大时，开销很大，但是对于 "),t("code",[s._v("echo")]),s._v("，这种情形不大可能出现。本章会介绍 "),t("code",[s._v("echo")]),s._v(" 的若干改进版，下一章解决低效问题。")]),s._v(" "),t("p",[s._v("循环索引变量 "),t("code",[s._v("i")]),s._v(" 在 "),t("code",[s._v("for")]),s._v(" 循环的第一部分中定义。符号 "),t("code",[s._v(":=")]),s._v(" 是 "),t("em",[s._v("短变量声明")]),s._v("（short variable declaration）的一部分，这是定义一个或多个变量并根据它们的初始值为这些变量赋予适当类型的语句。下一章有这方面更多说明。")]),s._v(" "),t("p",[s._v("自增语句 "),t("code",[s._v("i++")]),s._v(" 给 "),t("code",[s._v("i")]),s._v(" 加 "),t("code",[s._v("1")]),s._v("；这和 "),t("code",[s._v("i+=1")]),s._v(" 以及 "),t("code",[s._v("i=i+1")]),s._v(" 都是等价的。对应的还有 "),t("code",[s._v("i--")]),s._v(" 给 "),t("code",[s._v("i")]),s._v(" 减 "),t("code",[s._v("1")]),s._v("。它们是语句，而不像 C 系的其它语言那样是表达式。所以 "),t("code",[s._v("j=i++")]),s._v(" 非法，而且 "),t("code",[s._v("++")]),s._v(" 和 "),t("code",[s._v("--")]),s._v(" 都只能放在变量名后面，因此 "),t("code",[s._v("--i")]),s._v(" 也非法。")]),s._v(" "),t("p",[s._v("Go 语言只有 "),t("code",[s._v("for")]),s._v(" 循环这一种循环语句。"),t("code",[s._v("for")]),s._v(" 循环有多种形式，其中一种如下所示：")]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" initialization"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" condition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" post "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// zero or more statements")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("code",[s._v("for")]),s._v(" 循环三个部分不需括号包围。大括号强制要求，左大括号必须和 "),t("em",[t("code",[s._v("post")])]),s._v(" 语句在同一行。")]),s._v(" "),t("p",[t("em",[t("code",[s._v("initialization")])]),s._v(" 语句是可选的，在循环开始前执行。"),t("em",[t("code",[s._v("initalization")])]),s._v(" 如果存在，必须是一条 "),t("em",[s._v("简单语句")]),s._v("（simple statement），即，短变量声明、自增语句、赋值语句或函数调用。"),t("code",[s._v("condition")]),s._v(" 是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为 "),t("code",[s._v("true")]),s._v(" 则执行循环体语句。"),t("code",[s._v("post")]),s._v(" 语句在循环体执行结束后执行，之后再次对 "),t("code",[s._v("condition")]),s._v(" 求值。"),t("code",[s._v("condition")]),s._v(" 值为 "),t("code",[s._v("false")]),s._v(" 时，循环结束。")]),s._v(" "),t("p",[s._v("for 循环的这三个部分每个都可以省略，如果省略 "),t("code",[s._v("initialization")]),s._v(" 和 "),t("code",[s._v("post")]),s._v("，分号也可以省略：")]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// a traditional "while" loop')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" condition "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("如果连 "),t("code",[s._v("condition")]),s._v(" 也省略了，像下面这样：")]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a traditional infinite loop")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("这就变成一个无限循环，尽管如此，还可以用其他方式终止循环，如一条 "),t("code",[s._v("break")]),s._v(" 或 "),t("code",[s._v("return")]),s._v(" 语句。")]),s._v(" "),t("p",[t("code",[s._v("for")]),s._v(" 循环的另一种形式，在某种数据类型的区间（range）上遍历，如字符串或切片。"),t("code",[s._v("echo")]),s._v(" 的第二版本展示了这种形式：")]),s._v(" "),t("p",[t("u",[t("i",[s._v("gopl.io/ch1/echo2")])])]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Echo2 prints its command-line arguments.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"os"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\ts"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sep "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("range")]),s._v(" os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\ts "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" sep "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arg\n\t\tsep "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("每次循环迭代，"),t("code",[s._v("range")]),s._v(" 产生一对值；索引以及在该索引处的元素值。这个例子不需要索引，但 "),t("code",[s._v("range")]),s._v(" 的语法要求，要处理元素，必须处理索引。一种思路是把索引赋值给一个临时变量（如 "),t("code",[s._v("temp")]),s._v("）然后忽略它的值，但 Go 语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。")]),s._v(" "),t("p",[s._v("Go 语言中这种情况的解决方法是用 "),t("em",[s._v("空标识符")]),s._v("（blank identifier），即 "),t("code",[s._v("_")]),s._v("（也就是下划线）。空标识符可用于在任何语法需要变量名但程序逻辑不需要的时候（如：在循环里）丢弃不需要的循环索引，并保留元素值。大多数的 Go 程序员都会像上面这样使用 "),t("code",[s._v("range")]),s._v(" 和 "),t("code",[s._v("_")]),s._v(" 写 "),t("code",[s._v("echo")]),s._v(" 程序，因为隐式地而非显式地索引 "),t("code",[s._v("os.Args")]),s._v("，容易写对。")]),s._v(" "),t("p",[t("code",[s._v("echo")]),s._v(" 的这个版本使用一条短变量声明来声明并初始化 "),t("code",[s._v("s")]),s._v(" 和 "),t("code",[s._v("seps")]),s._v("，也可以将这两个变量分开声明，声明一个变量有好几种方式，下面这些都等价：")]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[s._v("s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n")])])]),t("p",[s._v("用哪种不用哪种，为什么呢？第一种形式，是一条短变量声明，最简洁，但只能用在函数内部，而不能用于包变量。第二种形式依赖于字符串的默认初始化零值机制，被初始化为 "),t("code",[s._v('""')]),s._v("。第三种形式用得很少，除非同时声明多个变量。第四种形式显式地标明变量的类型，当变量类型与初值类型相同时，类型冗余，但如果两者类型不同，变量类型就必须了。实践中一般使用前两种形式中的某个，初始值重要的话就显式地指定变量的类型，否则使用隐式初始化。")]),s._v(" "),t("p",[s._v("如前文所述，每次循环迭代字符串 "),t("code",[s._v("s")]),s._v(" 的内容都会更新。"),t("code",[s._v("+=")]),s._v(" 连接原字符串、空格和下个参数，产生新字符串，并把它赋值给 "),t("code",[s._v("s")]),s._v("。"),t("code",[s._v("s")]),s._v(" 原来的内容已经不再使用，将在适当时机对它进行垃圾回收。")]),s._v(" "),t("p",[s._v("如果连接涉及的数据量很大，这种方式代价高昂。一种简单且高效的解决方案是使用 "),t("code",[s._v("strings")]),s._v(" 包的 "),t("code",[s._v("Join")]),s._v(" 函数：")]),s._v(" "),t("p",[t("u",[t("i",[s._v("gopl.io/ch1/echo3")])])]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tfmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Join")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("最后，如果不关心输出格式，只想看看输出值，或许只是为了调试，可以用 "),t("code",[s._v("Println")]),s._v(" 为我们格式化输出。")]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[s._v("fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("os"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("这条语句的输出结果跟 "),t("code",[s._v("strings.Join")]),s._v(" 得到的结果很像，只是被放到了一对方括号里。切片都会被打印成这种格式。")]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("练习 1.1：")]),s._v(" 修改 "),t("code",[s._v("echo")]),s._v(" 程序，使其能够打印 "),t("code",[s._v("os.Args[0]")]),s._v("，即被执行命令本身的名字。")]),s._v(" "),t("p",[t("strong",[s._v("练习 1.2：")]),s._v(" 修改 "),t("code",[s._v("echo")]),s._v(" 程序，使其打印每个参数的索引和值，每个一行。")]),s._v(" "),t("p",[t("strong",[s._v("练习 1.3：")]),s._v(" 做实验测量潜在低效的版本和使用了 "),t("code",[s._v("strings.Join")]),s._v(" 的版本的运行时间差异。（"),t("RouterLink",{attrs:{to:"/gopl/ch1/ch1-06.html"}},[s._v("1.6 节")]),s._v("讲解了部分 "),t("code",[s._v("time")]),s._v(" 包，"),t("RouterLink",{attrs:{to:"/gopl/ch11/ch11-04.html"}},[s._v("11.4 节")]),s._v("展示了如何写标准测试程序，以得到系统性的性能评测。）")],1)])}),[],!1,null,null,null);t.default=e.exports}}]);