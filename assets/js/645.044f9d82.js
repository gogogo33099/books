(window.webpackJsonp=window.webpackJsonp||[]).push([[645],{1123:function(t,o,r){"use strict";r.r(o);var e=r(14),n=Object(e.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"_14-0-协程-goroutine-与通道-channel"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_14-0-协程-goroutine-与通道-channel"}},[t._v("#")]),t._v(" 14.0 协程 (goroutine) 与通道 (channel)")]),t._v(" "),o("p",[t._v("作为一门 21 世纪的语言，Go 原生支持应用之间的通信（网络，客户端和服务端，分布式计算，参见"),o("RouterLink",{attrs:{to:"/the-way-to-go/15.0.html"}},[t._v("第 15 章")]),t._v("和程序的并发。程序可以在不同的处理器和计算机上同时执行不同的代码段。Go 语言为构建并发程序的基本代码块是协程 (goroutine) 与通道 (channel)。他们需要语言，编译器，和 runtime 的支持。Go 语言提供的垃圾回收器对并发编程至关重要。")],1),t._v(" "),o("p",[o("strong",[t._v("不要通过共享内存来通信，而通过通信来共享内存。")])]),t._v(" "),o("p",[t._v("通信强制协作。")]),t._v(" "),o("h2",{attrs:{id:"链接"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),o("ul",[o("li",[o("RouterLink",{attrs:{to:"/the-way-to-go/directory.html"}},[t._v("目录")])],1),t._v(" "),o("li",[t._v("上一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/13.10.html"}},[t._v("性能调试：分析并优化 Go 程序")])],1),t._v(" "),o("li",[t._v("下一节："),o("RouterLink",{attrs:{to:"/the-way-to-go/14.1.html"}},[t._v("并发、并行和协程")])],1)])])}),[],!1,null,null,null);o.default=n.exports}}]);